function MonitorSytemReport()
{
  eval $( __call_localityLocalName=MonitorSytemReport __call_locality  ) ; 
  
  function ShowDate()
  {
    eval $( __call_localityLocalName=ShowDate __call_locality  ) ; 
    date "+${ArrayDateFormat[0]}, epoch:%s" ; 
  }  
  
  function NetReport()
  {
    eval $( __call_localityLocalName=NetReport __call_locality  ) ; 
    echo -ne "****************************************\n\tNETWORK MONITOR\n****************************************\n" ; 
    netstat -tulpn ;
  }  
  
  function DiskReport()
  {
    eval $( __call_localityLocalName=DiskReport __call_locality  ) ; 
    echo -ne "****************************************\n\tDISK MONITOR\n****************************************\n" ; 
    df -h ;
  }
  
  function DefaultSleep()
  {
    eval $( __call_localityLocalName=DefaultSleep __call_locality  ) ; 
    eval "local DefaultSleepInterleave=\${${StrFuncName}Time:=2}" ;
    sleep ${DefaultSleepInterleave} ;
    clear ; 
  }  
  
  function __fnct_exec()
  {
    eval $( __call_localityLocalName=FunctorExecute __call_locality  ) ; 
    eval "${ArrayArg[0]}" ;
  }
  
  local ArrayExecOrder=( ShowDate DiskReport NetReport DefaultSleep ) ;
  
  while [ 1 ] ; do 
    eval $( __in_for ArrayExecOrder __fnct_exec ) ;
  done

}

function MonitorKernelReport()
{
  eval $( __call_localityLocalName=MonitorSytemReport __call_locality  ) ; 
  
  function ShowDate()
  {
    eval $( __call_localityLocalName=ShowDate __call_locality  ) ; 
    date "+${ArrayDateFormat[0]}, epoch:%s" ; 
  }  
  
  function KernelReport()
  {
    eval $( __call_localityLocalName=KernelReport __call_locality  ) ; 
    eval "local IntTailSize=\${${StrFuncName}NbLine:=15}" ;
    echo -ne "****************************************\n\tKERNEL MESSAGE\n****************************************\n" ; 
    dmesg | tail -n ${IntTailSize} ;
  }  
  
  function DefaultSleep()
  {
    eval $( __call_localityLocalName=DefaultSleep __call_locality  ) ; 
    eval "local DefaultSleepInterleave=\${${StrFuncName}Time:=2}" ;
    sleep ${DefaultSleepInterleave} ;
    clear ; 
  }
    
  function __fnct_exec()
  {
    eval $( __call_localityLocalName=FunctorExecute __call_locality  ) ; 
    eval "${ArrayArg[0]}" ;
  }
  
  local ArrayExecOrder=( ShowDate KernelReport DefaultSleep ) ;
  
  while [ 1 ] ; do 
    eval $( __in_for ArrayExecOrder __fnct_exec ) ;
  done

}


function GetAppsByPid()    
{ 
 eval $( __call_localityLocalName=GABP __call_locality  ) ; 
 eval $( FParamFuncName=${StrFuncName} FParamSuffixName=DefaultApps FParamVarName=StrDefaultApps FParamDefaultValue=ps __fnctCreateLocalityFuncParam     ) ;
 eval $( FParamFuncName=${StrFuncName} FParamSuffixName=DefaultAppsOption0 FParamVarName=ArrayDefaultApps[0] FParamDefaultValue=-eo __fnctCreateLocalityFuncParam     ) ;
 eval $( FParamFuncName=${StrFuncName} FParamSuffixName=DefaultAppsOption1 FParamVarName=ArrayDefaultApps[1] FParamDefaultValue=pid,command __fnctCreateLocalityFuncParam     ) ;
 eval $( FParamFuncName=${StrFuncName} FParamSuffixName=DefaultZenityFilterName FParamVarName=StrDefaultZenityFilterName FParamDefaultValue=FilterAwk __fnctCreateLocalityFuncParam     ) ;
 eval $( FParamFuncName=${StrFuncName} FParamSuffixName=ToActionName FParamVarName=StrToActionName FParamDefaultValue=kill __fnctCreateLocalityFuncParam     ) ;
 
 function MainAction()
 {
  eval $( __call_localityLocalName=MA __call_locality  ) ; 
  local CmdEval=( ${StrDefaultApps} ${ArrayDefaultApps[@]} ) ;
  eval "${CmdEval[@]}" ;
 }
 
 function FilterAwk()
 {
  eval $( __call_localityLocalName=FA __call_locality  ) ; 
  awk 'BEGIN{}{Pid=$1;Apps=$0;gsub(/^[0-9]+\ /,"",Apps);printf("FALSE\n%s\n%s\n",Pid,Apps)}END{}' ;
 }
 function ActionExec()
 {
   eval $( __call_localityLocalName=AE __call_locality  ) ; 
   awk -F='|' 'BEGIN{IntLength=split($0,ArrayPid,/|/)}{ for( IntId in ArrayPid){ printf("system(sprintf("kill -9 %s"))",ArrayPid[IntId])} }END{}' ;
 }
 StrDefaultZenityFilterName
 function ZenityList()
 {
  eval $( __call_localityLocalName=FA __call_locality  ) ; 
  zenity --width=800 --height=600 --list  --checklist --text="Choose Pid to ${StrToActionName}" --column "Selected" --column "Pid" --column "Apps" ;
 }

}

function NicePidHarmonicAlteration()
{
  ###
  ### The Goal is to lower all Nice Pid from the same Nice-level to a lower one, when electric
  ### disruption happen. We also need to keep Pid list from Original Nice Level so we can
  ### can restore back the Nice... and Also, to check the battery state with notmal
  ### operation to see watts saved by brief interruption, and increase the test laps.
  ###
  ###
  eval $( __call_localityLocalName=NPHA __call_locality  ) ; 
  eval $( FParamFuncName=${StrFuncName} FParamSuffixName=NiceSeek FParamVarName=IntNiceSeek FParamDefaultValue=0 __fnctCreateLocalityFuncParam     ) ;
  eval $( FParamFuncName=${StrFuncName} FParamSuffixName=DefaultAppsOption0 FParamVarName=ArrayDefaultApps[0] FParamDefaultValue=-eo __fnctCreateLocalityFuncParam     ) ;
  eval $( FParamFuncName=${StrFuncName} FParamSuffixName=DefaultAppsOption1 FParamVarName=ArrayDefaultApps[1] FParamDefaultValue=pid,nice __fnctCreateLocalityFuncParam     ) ;
  eval $( FParamFuncName=${StrFuncName} FParamSuffixName=DefaultFilterName FParamVarName=StrDefaultFilterName FParamDefaultValue=FilterAwk __fnctCreateLocalityFuncParam     ) ;
  
  function AppsNice()
  {
   eval $( __call_localityLocalName=AN __call_locality ) ; 
   local CmdEval=( ps ${ArrayDefaultApps[@]} ) ;
   eval "${CmdEval[@]}" ;
  }
 
  function FilterAwk()
  {
   eval $( __call_localityLocalName=FA __call_locality  ) ; 
   awk 'BEGIN{}{printf("%s ",$1)}END{}'
  }
  
  function GetNicePid()    
  { 
   eval $( __call_localityLocalName=GNP __call_locality ) ; 
    local CmdEval=( AppsNice "|" egrep -i "${DefaultNiceSeek}$" "|" ${StrDefaultFilterName} )  ;
  } ; 
  
  eval "local ArrayPsNice${DefaultNiceSeek}=( $( GetNicePid ) )" ;
  
}



