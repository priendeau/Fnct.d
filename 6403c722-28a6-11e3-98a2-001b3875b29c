###
### FootPrint Added, see Prefixed-Var ZSEAddFootPrint from ZenityShellEval
###

###File:/var/cache/Fnct.D/ZenityShellEval/6403c722-28a6-11e3-98a2-001b3875b29c
###UUID-TIME-MARKER:4b87be82-95aa-11e6-8b1d-657bcfc54998
###Date: ${StrDateFormat}
###Sha1Sum: 8b5967f509fca7e1e447e6c8702f32bf4ba23a58
### Size:5580
### NbWord: 567\n



function GetVarReference( )
{
 local -a ArrayArg=( $* ) ;
 local -a __call_locality=( GVR GetVarReference ) ;
 local Arg0="${ArrayArg[0]}" ;
 local StrParent="GetVarReference" ;
 local BoolSynopsis=${GVRIsSynopsis:=False} ;
 local BoolName=${GVRIsName:=False} ;
 local BoolSummary=${GVRIsSummary:=False} ;
 local BoolDesc=${GVRIsDesc:=False} ;
 local BoolDisplayDebug=${GVRIsDebug:=False} ; 
 local BoolOldPrefix=${GVRIOldPrefix:=False} ; 
 local BoolSupportCA=${GVRIIsProvideCAArg:=True} ;  
 local BoolDisplayCA=${GVRIIsShowCADecl:=False} ;
 local TextDescFunc="_NameHelp__Synopsis__Summary__Description_" ; 
 
 if  [ "${BoolName:=False}" == "True" ]  ; then 
  if [ "${BoolDisplayDebug:=False}" == "True" ] ; then
    echo "Status of StrNameHelper: ${#StrNameHelper} char(s): [ ${StrNameHelper}] " ; 
  fi 
  local IntNameHelpLen=${#StrNameHelper} ;
  if [ ${IntNameHelpLen:=0} -gt 0 ] ; then 
    TextDescFunc="""${TextDescFunc//_NameHelp_/Name\\n${StrNameHelper}\\n\\n}""" ; 
  else 
    TextDescFunc="""${TextDescFunc//_NameHelp_/}""" ; 
  fi
 else
  TextDescFunc="""${TextDescFunc//_NameHelp_/}""" ;
 fi
 if  [ "${BoolSynopsis:=False}" == "True" ]  ; then 
  if [ ${#StrSynopsis} -gt 0 ] ; then
    TextDescFunc="""${TextDescFunc//_Synopsis_/\\nSynopsis\\n\\t\\t${StrSynopsis}\\n\\n}""" ; 
  else
    TextDescFunc="""${TextDescFunc//_Synopsis_/}""" ; 
  fi 
 else
   TextDescFunc="""${TextDescFunc//_Synopsis_/}""" ; 
 fi 
 if  [ "${BoolSummary:=False}" == "True" ]  ; then 
   if [ ${#StrSummary} -gt 0 ] ; then
    TextDescFunc="""${TextDescFunc//_Summary_/\\nSummary\\n\\t\\t${StrSummary}\\n\\n}""" ;
   else
     TextDescFunc="""${TextDescFunc//_Summary_/}""" ;
  fi
 else
   TextDescFunc="""${TextDescFunc//_Summary_/}""" ;
 fi
 if  [ "${BoolDesc:=False}" == "True" ]  ; then 
   if [ ${#StrDescription} -gt 0 ] ; then
    TextDescFunc="""${TextDescFunc//_Description_/\\nDescription\\n\\t\\t${StrDescription}\\n\\n}"""
   else
     TextDescFunc="""${TextDescFunc//_Description_/}""" ;
   fi
 else
  TextDescFunc="""${TextDescFunc//_Description_/}""" ;
 fi
 # date: Sat Sep 28 21:27:21 EDT 2013
 # Adding filter of comment line in possible temporary left PrefixedVariable not
 # removed from function declaration, pattern  : "^[\t\ ]*#+" 
 function ParseInternalVar( )
 {
   local -a ArrayArg=( $* ) ;
   local -a __call_locality=( PIV ParseInternalVar ${StrParent} ) ;
   local Arg0="${ArrayArg[0]}" ;
   /bin/egrep -i ":=" | /bin/grep -v "^[\t\ ]*#+" | /bin/sed -r 's/(^[\ \t]*)//g;s/=\$/ \$/g;s/;//g' | /usr/bin/cut -d ' ' -f 3- | /bin/sed 's/\(:=\)/ /g;s/\${//g;s/}$//g;s/\(^[A-Za-z0-9=_]* \)/Variable \1,\n\tDefault Value:/g' | /bin/sed 's/[\}\{]//g' ;
 # date: Wed Sep 14 14:27:21 EDT 2016
 # Adding path to following application: grep, egrep, sed, cut . 
 # removing  '\|', adding only '|', still searching the ':' error not found happenning freely. 
 }
 
 function FunctionList()
 { 
  local -a ArrayArg=( $* ) ;
  local -a __call_locality=( FL FunctionList ${StrParent} ) ;
  local Arg0="${ArrayArg[0]}" ;
  local StrFunctionName=${FLFunctionName:=None} ; 
  declare -f ${StrFunctionName} | egrep "^[\ \t]+function" | sed 's/\([\ \t]*function[\t\ ]*\)\([a-zA-Z0-9\_\-]*\)\([\t\ ]*[\)\(]*\)/\2/g' | tr '[:cntrl:]' ',' ;
 }
 
 function ParseLocalityVar()
 {
   local ArrayArg=( $* ) ;
   local Arg0=${ArrayArg[0]} ;
   local __call_locality=( PLV ParseLocalityVar ${StrParent} ) ;
   /bin/egrep "__call_locality" | /bin/sed 's/[\)\(]/ /g;s/;//g' | /usr/bin/cut -d ' ' -f 7 ;	
 }
 
 local StrInternalFunction=$( FLFunctionName="${ArrayArg[0]}" FunctionList ) ; 
 StrInternalFunction=${StrInternalFunction:0:$(( ${#StrInternalFunction}-1 ))}; 
 if [ "${BoolDisplayCA:=False}" == "True" ] ; then 
  echo -ne "\nFunctionList Inspected:${StrInternalFunction}\n" > /dev/stderr ; 
 fi 
 local StrDisplayOutHelp="Help:\n\nFunction ${ArrayArg[0]}\n${TextDescFunc}\nFunction Member:\n\t_MEMBER_\n\nDefault Variable Value:\n" ; 
 StrDisplayOutHelp=${StrDisplayOutHelp//_MEMBER_/${StrInternalFunction}} ;
 echo -ne ${StrDisplayOutHelp} ;
 local CallLocalityInternalName ; 
 if [ "${BoolOldPrefix:=False}" == "True" ] ; then 
  CallLocalityInternalName=$( declare -f ${ArrayArg[0]} | ParseLocalityVar ) ;
 else
  CallLocalityInternalName=$( GetStdPrefixName ${ArrayArg[0]} ) ; 
 fi
 #declare -f ${ArrayArg[0]} | /bin/egrep "\$\{${CallLocalityInternalName}[A-Za-z0-9_\-]*:=" | ParseInternalVar ;
 local StrTypeCallArg="__Call_Argument" ;
 if [ "${versionCA:=0.0.1}" == "0.0.2" ] ; then
  StrTypeCallArg="CallArgument" ; 
 fi  
 
 local StrCallArg=$( declare -f "${ArrayArg[0]}" | egrep --max-count=1 -i "${StrTypeCallArg}" | egrep -i "${ArrayArg[0]}" | sed -r  's/eval[\ \t]*\$\([\ \t]*eval//g;s/\)\;//g;s/^[\ \t]*//g'  ); 
 local StrFunctionList=$( declare -f "${ArrayArg[0]}"   ) ; 
 if [ "${BoolDisplayCA:=False}" == "True" ] ; then 
  echo -ne "\nCallArgument Inspected:${StrCallArg}\n" > /dev/stderr ; 
 fi 
 eval local StrCodeCallArg=$( eval ${StrCallArg} | sed 's/;/\n/g' ) ; 
 StrFunctionList="${StrFunctionList}${StrCodeCallArg}"
 
 if [ "${BoolSupportCA:=True}" == "False" ] ; then 
  declare -f ${ArrayArg[0]} | /bin/grep "\ *=\ *\${${CallLocalityInternalName}[A-Za-z0-9_\-]*:\=" | ParseInternalVar ;  
 else
  if [ "${versionCA:=0.0.1}" == "0.0.1" -o "${versionCA:=0.0.1}" == "0.0.2" ] ; then
   echo "${StrFunctionList}" | /bin/grep "\ *=\ *\${${CallLocalityInternalName}[A-Za-z0-9_\-]*:\=" | ParseInternalVar ;  
  else
   declare -f ${ArrayArg[0]} | /bin/grep "\ *=\ *\${${CallLocalityInternalName}[A-Za-z0-9_\-]*:\=" | ParseInternalVar ;  
  fi
 fi
 
 
}
