#!/bin/bash
###
### FootPrint Added, see Prefixed-Var ZSEAddFootPrint from ZenityShellEval
###

###File:/var/cache/Fnct.D/ZenityShellEval/0f86b448-72f4-11e6-8b1d-001e4c8856d6
###UUID-TIME-MARKER:41785b0c-9b10-11e6-8b1d-001e4c8856d6
###Date: 20161025-20:08:00,1477440480
###Sha1Sum: 0fa8312c4a11971a0319d6d79712dc82e9829b1e
###Size:11672
###NbLine: 284
###NbWord: 1126


unset GetDateReportCreation; 
function GetDateReportCreation()
{
 local ArrayArg=( $* ) ;
 local __call_locality=( GDRC GetDateReportCreation ) ;
 local Arg0=${ArrayArg[0]} ; 
 local StrDateFormat=${GDRCDateFormat:="%Y%m%d_%H%M%S"} ; 
 local StrDateApps=${GDRCDateApps:=GetOtherDate} ;
 local StrVarListTransfert="StrDateFormat,StrDateApps" ;
 local StrSwitchMessages="${StrSwitchesShow}${StrStartSwitches}\n${StrGetMsgSwitches}\n${StrListMsgSwitches}\n${StrCompWordMsgSwitches}\n" ;
 
 function __main_StartServices()
 {
  GODFormat=${StrDateFormat} ${StrDateApps} ; 
 }
 
 
 if [ "${Arg0:=--startservices}" == "--help"	] ; then 
  GetVarReference ${__call_locality[1]} ; 
  echo -ne "${StrSwitchMessages}" > /dev/stderr ; 
 elif [ "${Arg0:=--startservices}" == "--get" ] ; then 
  eval """local ArgGet=\${${ArrayArg[1]}}""" ; 
  echo -ne """${ArgGet}\n""" ;
 elif [ "${Arg0:=--startservices}" == "--list" ] ; then 
  eval $( __GetVarReferenceList ) ;
 elif [ "${Arg0:=--startservices}" == "--compword" ] ; then 
  eval $( __GetVarReferenceCompWord ) ;
 elif [ "${Arg0:=--startservices}" == "--startservices" ] ; then 
  eval $( eval VTVIsArrayStyleInsert=True      \
          VTVValueEntry=${StrVarListTransfert} \
          VTVIsValueReAssign=True              \
          VTVIsValueToConvert=False            \
          VTVIsArrayStyleInsert=True           \
          ValueToVariable ) __main_StartServices
 fi
}


 
 
### ##########################################################################
### #                                  MdCd
### ##########################################################################

unset MdCd ;
function MdCd()
{ 
 local -a ArrayArg=( $* ) ;
 local -a __call_locality=( MC MdCd ) ;
 local Arg0="${ArrayArg[0]}" ; 
 local StrAppsExpandModel=${MCAppsExpandModel:=/bin/tar} ;
 local StrAppsCall=${MCAppsExpandCall:=__APPS__ __OPT__} ;
 local StrAppsExpandOpt=${MCAppsExpandOpt:=-x -j -f __FILE__ -C __PATH__} ;
 local StrMkDirApps=${MCMKDIRApps:=/bin/mkdir} ; 
 local StrLocationTemplate=${MCTemplatePath:=${StrBasePath}} ; 
 local StrPathModelTemplate=${MCTemplatePathModel:=NewPathModel.tar.bz2}
 local StrFileModel=${StrLocationTemplate}/${StrPathModelTemplate} ; 
 local IntGetContentId=${MCContentId:=2} ; 
 local StrDevOut=${MCDevOut:=/dev/stderr} ;
 local StrTagCmdParser=${MCCmdTagParserRules:=StrAppsExpandModel:__APPS__,StrAppsExpandOpt:__OPT__,StrFileModel:__FILE__,StrPathLoc:__PATH__}; 
 local StrFileList=${MCListFile:=None} ; 
 local -a ArrayFile=( ${StrFileList//,/ } ) ; 
 local IntFile=$(( ${#ArrayFile[@]}-1 ))  ; 
 local StrPathCurPtr=${MCCurGetPath:=None} ; 
 local StrDevOut=${MCDevOut:=/dev/stderr} ;
 local StrStoreTpl="__DATE__:__PATH__:__UTLM__:__RES__" ;
 local BoolDisplayDebug=${MCDisplayDebug:=False} ; 
 local StrVarListTransfert="BoolDisplayDebug,StrStoreTpl,StrFileList,StrAppsCall,StrMkDirApps,StrTagCmdParser,GCID,GHID,IntFile,StrFileStoreInfo,StrDate,StrPathLoc,UserTypeLocationModel,GetHeaderId,IntGetContentId,StrAppsExpandModel,StrAppsExpandOpt,StrFileModel" ;
 local StrSwitchMessages="${StrSwitchesShow}${StrStartSwitches}\n${StrGetMsgSwitches}\n${StrListMsgSwitches}\n${StrCompWordMsgSwitches}\n" ;
 local ArrayMsg=( ) ;
 ArrayMsg[0]="CMD: __CMD__, PATH: __PATH__  " ;
 ArrayMsg[1]="" ; 
 ArrayMsg[2]="" ; 
 
 function Verbosis()
 {
  local -a ArrayArg=( $* ) ; 
  local -a __call_locality=( Verbosis Verb );
  local StrMsg=${VerbMsg:=__TEXT__} ; 
  local StrDevOut=${VerbDev:=/dev/stderr} ; 
  local IsVerboseState=${VerbState:=False} ;
  local StrVerboseHeader=${VerbHeader:=VERBOSE} ;
  local IsDisplayFormatted=${VerbFormated:=True} ;
  if [ "${IsVerboseState:=False}" == "True" ] ; then 
   if [ "${IsDisplayFormatted:=True}" == "True" ] ; then 
     echo -ne "${StrVerboseHeader}:[ ${StrMsg} ]\n" > ${StrDevOut} ;
   else
     echo -ne "${StrMsg}\n" > ${StrDevOut} ;
   fi 
  fi
 } 
 ### Model :VerbMsg=MSG VerbHeader=DEBUG VerbFormated=True VerbState=${BoolDisplayDebug} VerbDev=/dev/stderr  Verbosis

 function GetCol1()
 {
  local __call_locality=( GC1 GetCol1 ) ;
  local ArrayArg=( $* ) ; 
  local Arg0=${ArrayArg[0]} ;
  /usr/bin/cut -d ' ' -f 1 
 }
	
 function ShaSum1()
 {
  local __call_locality=( SS1 ShaSum1 ) ;
  local ArrayArg=( $* ) ; 
  local Arg0=${ArrayArg[0]} ;
  /usr/bin/sha1sum ;
 }	
	
 function GetMemHeader()
 {
  local __call_locality=( GMH GetMemHeader ) ;
  local ArrayArg=( $* ) ; 
  local Arg0=${ArrayArg[0]} ;
  echo "${ArrayMdCd[@]}" | ShaSum1 | GetCol1
 }
	
 function GetMemContent()
 {
  local __call_locality=( GMC GetMemContent )
  local ArrayArg=( $* ) ; 
  local Arg0=${ArrayArg[0]} ; 
  echo "${ArrayMdCd[@]}" ; 
 }

 function __main_StartServices()
 {
  local __call_locality=( Main __main_StartServices ) ;
  local ArrayArg=( $* ) ;
  local Arg0=${ArrayArg[0]} ;  


  echo -ne "StrFileStoreInfo : ${StrFileStoreInfo}\n" > ${MCDevOut} ; 
  echo -ne "StrFileStoreLock : ${StrFileStoreLock}\n" > ${MCDevOut} ; 

  local UserTypeLocationModel="${StrLocationTemplate}/${StrPathModelTemplate}" ;
  echo -ne "UserTypeLocationModel : ${UserTypeLocationModel}\n" > ${MCDevOut} ; 
    
  local currentSHA=$( GBLDAction=GetHeader GBLDFileStoreInfo=${StrFileStoreInfo} IntGHId=1 GetterByLineData ) ;
  local ArrayMdCd=( ) ; 
  local StrContent=$( GBLDAction=GetContent GBLDFileStoreInfo=${StrFileStoreInfo} IntGCId=2 GetterByLineData ) ; 
  local ErrContent=$? ; 
  if [ ${ErrContent:=-1} -eq 0 ] ; then 
   ### Replacing declare by a local declare -a ArrayMdCd=( ${StrContent} ${ArrayMdCd[@]} );
   ArrayMdCd=( ${StrContent} ${ArrayMdCd[@]} );
  else
   ### replacing by a local var declare -a ArrayMdCd=( ${ArrayMdCd[@]} );
   ArrayMdCd=( ${ArrayMdCd[@]} );
  fi 
  
  local StrPathLoc=""
  local StrMsg="" ; 

  ### The Index of number of intem inside the array are initialized inside the Top
  ### Function MdCd under name IntFile and travel thru ValueToVAriable here.  
  local PathFromGetter="" ; 
  local StrStoreStream="" ;
  local StrDate=$( GetDateReportCreation ) ;
  local ArrayMdCdTag="" ;
  local CmdLine="" ; 
  for (( intx=0 ; intx <= ${IntFile} ; intx++ )) ; do 
   StrPathLoc=$( MdCd --get ArrayFile[${intx}] ) ; 
   StrMsg="Processing Creation of __PATH__" ; 
   VerbMsg="${StrMsg//__PATH__/${StrPathLoc}}" \
   VerbHeader="${__call_locality[1]}-PATH" \
   VerbFormated=True \
   VerbState=${BoolDisplayDebug} \
   VerbDev=/dev/stderr  Verbosis ;
   
   ### PathFromGetter=$( MCCurGetPath="${StrPathLoc}" MdCd --get MCCurGetPath ) ; 
   if [ ! -d "${StrPathLoc}"  ] ; then 
    StrCmdLine="""${StrMkDirApps} -p ${StrPathLoc}""" ; 
    VerbMsg="${StrCmdLine}" VerbHeader="${__call_locality[1]}-CmdLine" VerbFormated=True VerbState=${BoolDisplayDebug} VerbDev=/dev/stderr  Verbosis ;
    $( eval ${StrCmdLine} ) ;
   fi 
   ### Notice : 917a3c2a-e331-11e5-98a2-001e4c8856d6 
   ### Note : Problems in tar command fixed. Tar command works in different way
   ### unless somes libs where updated. 
   ######
   # cd ${StrPathLoc} ###---> No longer needed, tar problems ; Somes accounts did not 
   # drop de model-default file inside the path. 
   ######
   
   ### Ask for a copy or recall it from $( MdCd --get StrAppsCall )  ?
   #local ArrayMdCdTag=( ${StrTagCmdParser//,/ } ) ; 
   local StrCmdLineTar="${StrAppsCall}" ;  

   eval StrTagCmd=$( eval \
     TPDisplayParserNotice=${BoolDisplayDebug}  \
     TPDisplayDebug=${BoolDisplayDebug}         \
     TPArrayName=ArrayMdCdTag                   \
     TPVarNameParsed="StrCmdLineTar"            \
     TPListTag="${StrTagCmdParser}"             \
     TagParser  ) ; 
   VerbMsg="${StrTagCmd}" \
   VerbHeader="${__call_locality[1]}-TagParser-Code" \
   VerbFormated=True \
   VerbState=${BoolDisplayDebug} \
   VerbDev=/dev/stderr  Verbosis ; 
   
   eval $( eval """${StrTagCmd}""" ) ; 
   
   VerbMsg="${StrCmdLineTar}" \
   VerbHeader="${__call_locality[1]}-TagParser-CmdLine" \
   VerbFormated=True \
   VerbState=${BoolDisplayDebug} \
   VerbDev=/dev/stderr  Verbosis ; 
   #for StrPairTagVal in ${ArrayMdCdTag[@]} ; do
    ### In String ${.../%Pattern} will remove only the end
    ### In String ${.../#Pattern} will remove only the beginning
    #StrPairLeft=${StrPairTagVal/%:[A-Za-z0-9]*/}
    #StrPairRight=${StrPairTagVal/#__[A-Za-z0-9]*__:/} ;
    #eval "CmdLine=${CmdLine//\${${StrPairLeft}}/${StrPairRight}}" ; 
    ### Notice : e395ecfc-6d8d-11e6-8b1d-001e4c8856d6
    ### Note : Storing Value inside a volatile Getter. 
    ### A volatile getter is a Variable with value=None until you query it inside a Parsing Model
    ### from Main Application Header and stipulate a Law like __PATH__:MCCurGetPath
    ### This one will return None if MdCd --get MCCurGetPath( not StrPathCurPtr ) is called. 
    ### Therefore developping a solid and straight-forward model of Loop-sequence 
    ### with stipping Left AND Right value and implying the Getter of this function 
    ### to repond by a value nominated inside Pre-definied value, path are stored 
    ### inside $* and are converted to be re-marshalled Here we are treating only 
    ### one of the path which involving to make a if statement and and to reduce 
    ### the sequence. While it's adding extra code, it skipping line simply parsing 
    ### the path we already have inside a Getter that ultimateli send us the 
    ### path when it's the time to ask about it. 

   #done
   VerbMsg="${StrCmdLineTar}" VerbHeader="${__call_locality[1]}-CmdLine" VerbFormated=True VerbState=${BoolDisplayDebug} VerbDev=/dev/stderr  Verbosis ;
   StrMsg=$( MdCd --get ArrayMsg[0] ) ; 
   StrMsg=${StrMsg//__CMD__/} ; 
   StrMsg=${StrMsg//__PATH__/} ; 
   VerbMsg=${StrMsg} VerbHeader="${__call_locality[1]}-DEBUG"  VerbDev=/dev/stderr VerbState=${BoolDisplayDebug} Verbosis ; 
   #echo -ne "Cmd:[ tar xvjfC ${UserTypeLocationModel} ${StrPathLoc} ]\n" > ${MCDevOut} ; 
   #StrAppsExpandModel,
   #StrAppsExpandOpt
   if [ -f ${UserTypeLocationModel} ] ; then 
    eval $( eval """${StrCmdLineTar}""" ) 2> /dev/null ;
    resultTar=$? ; 
   fi 
   local StrResult="No" ; 
   local StrStoreStream=${StrStoreTpl} ; 
   if [ ${resultTar:=1} -eq 0 ] ; then 
    StrResult="Yes" ; 
   fi
   StrStoreStream=${StrStoreStream//__DATE__/${StrDate}} ; 
   StrStoreStream=${StrStoreStream//__PATH__/${StrPathLoc}} ; 
   StrStoreStream=${StrStoreStream//__UTLM__/${UserTypeLocationModel}} ; 
   StrStoreStream=${StrStoreStream//__RES__/${StrResult}} ; 

   ArrayMdCd[${#ArrayMdCd[@]}]="${StrStoreStream}" ;  
   #echo "cd ${StrPathLoc} ;" ;
  done 
  ### GetMemHeader > ${StrFileStoreInfo} ; 
  echo "${ArrayMdCd[@]}" | ShaSum1 | GetCol1 > ${StrFileStoreInfo} ; 
  ###GetMemContent >> ${StrFileStoreInfo} ; 
  echo "${ArrayMdCd[@]}" >> ${StrFileStoreInfo} ;
 } 
 
 if [ "${Arg0:=--startservices}" == "--help"	] ; then 
  GetVarReference ${__call_locality[1]} ; 
  echo -ne "${StrSwitchMessages}" > /dev/stderr ; 
 elif [ "${Arg0:=--startservices}" == "--get" ] ; then 
  eval """local ArgGet=\${${ArrayArg[1]}}""" ; 
  echo -ne """${ArgGet}\n""" ;
 elif [ "${Arg0:=--startservices}" == "--list" ] ; then 
  eval $( __GetVarReferenceList ) ;
 elif [ "${Arg0:=--startservices}" == "--compword" ] ; then 
  eval $( __GetVarReferenceCompWord ) ;
 elif [ "${Arg0:=--startservices}" == "--startservices" ] ; then 
  eval $( eval VTVIsArrayStyleInsert=True      \
          VTVValueEntry=${StrVarListTransfert}  \
          VTVIsQuotedValue=True          \
          VTVIsValueReAssign=True       \
          VTVIsValueToConvert=False   \
          VTVIsArrayStyleInsert=True  \
          VTVIsWhiteList=True                 \
          VTVWhiteListTransfert=GCID,GHID      \
          ValueToVariable ) __main_StartServices ; 
 fi
}
