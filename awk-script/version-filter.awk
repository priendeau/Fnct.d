#!/usr/bin/awk
# -*- file : version-filter.awk -*-

@include "/etc/init.d/Fnct.D/awk-script/ApplicationParser.awk" 

BEGIN{ 
 
 StdErr="/dev/stderr" ; 
 ArrayCmd["0"]="#find /home/__USER__/github/Fnct.D -maxdepth 1 -type f -exec egrep -Hn \"version[A-Z]+:=\" {} \\;" ; 
 #ArrayRegExp["0"]= ; 
 
 gsub("__USER__", ENVIRON["USER"], ArrayCmd["0"] ) ; 
 
 VarReturn=ExpandAppsCall( ArrayCmd , 0 , StdErr ) ; 
 IntSplit=split( VarReturn, ACallApps, /[\ \t;\n\r\l]/  ) ; 
 printf("IntSplit return :%i chunk(s)\n", IntSplit ) ;  
 ArrayFNCT["version"]["0"]="" ; 
 idxAF=0 ; 
 ### 
 ### This Loop is to cycle across all line generated by 
 ### ExpandAppsCall .
 for( idxACallApps in ACallApps )
 {
  if( ACallApps[idxACallApps] ~ /version[A-Z]+/ )
  {
   StrVersionChunk=ACallApps[idxACallApps] ; 
   ###
   ### Create an array AVersion holding all string 
   ### similar to versionXXX.
   IntSplit=split( StrVersionChunk, AVersion, /version[A-Z]+/ ) ;
   ### In this step we have split into array, using the split
   ### and the "versionXXX" as split-sequence. 
   ### It resul in genaral of what we have found in leftmost
   ### side and rightmost position of the regular-expression. 
   ### extracting what we do require by removing theses 
   ### extra found let the regular expression being all 
   ### alone and be detectable or even what we require to 
   ### parse. 
   IsDisplay=0 ; 
   
   ### 
   ### This Loop is to cycle across all line resulting
   ### from split and holding all the string 'versionXXX'
   for( idxAV in AVersion )
   {
     # gsub(regexp, replacement [, target]) ;
     gsub(/\$/,"\\$", AVersion[idxAV] ) ; 
     sub( AVersion[idxAV], "",  StrVersionChunk ) ; 
     IntFound=0 ; 
     ### 
     ### This Loop is to cycle across all stored string 'versionXXX'
     ### and do compare with present String for similarity .
     ### from split and holding all the string 'versionXXX'
     for( idxAFInspect in ArrayFNCT["version"] )
     {
      if( ArrayFNCT["version"][ idxAFInspect ] == StrVersionChunk )
      {
       IntFound=1 ; 
       IsDisplay=0 ;
      } 
     }
     if( IntFound == 0 )
     {
      IsDisplay=1 ; 
      ArrayFNCT["version"][ ToStringValue( idxAF ) ]=StrVersionChunk ; 
      ArrayFNCT["chunk"][ ToStringValue( idxAF ) ]=idxACallApps
     }
   }
   if( IsDisplay == 1 )
   {
    ### add the correct ArrayFNCT["chunk"] instead of active pattern . 
    printf("Chunk number %i, found regular expression match : %s\n", strtonum(idxACallApps) ,StrVersionChunk,AVersion["1"],AVersion["2"] ) > StdErr ;  
   }
  } 
 }
 close( StdErr ); 

}
