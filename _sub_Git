#!/bin/bash


# Package _sub_Git


if [ "${versionGCBE:=0.0.1}" == "0.0.0" ] ; then 
 eval $( GFCFuncName=GitChckBranchEngine GlobalFunctionCleaning ) ;
 function GitChckBranchEngine()
 {
  local -a ArrayArg=( $* ) ;
  local -a __call_locality=( GCBE GitChckBranchEngine ) ;
  local Arg0="${ArrayArg[0]}";  

  local StrTitle="Zenity/Git Checkout Branch engine" ; 
  local StrGetBranch=$( git branch -l ) ;
  local StrText="Branch and activity, Selecting one will change\nthe default active branch by a checkout" ; 
  local StrSpanText="<span font_family=\"monospace\" size=\"medium\">__TEXT__</span>" ; 
  local IntHeight=300 ; 
  local IntWidth=300; 
  local -a ArrayColumn ; 
  local StrDefaultOpt="--list --radiolist" ; 
  ArrayColumn[0]="Active Branch" ; 
  ArrayColumn[1]="Branch name" ; 
  
  ### This is transforming the star inside the text showed from 'git branch -l' 
  ### into TRUE, and rest of the sed query does apply a FALSE on begin of line
  ### where there is no star. Especially particular the second filter inside the 
  ### sed does require to filter for [\t\ ] (tab and space) and '*' even it there
  ### is already a transformation of the star into 'TRUE'.
  local StrBranchToZenityField=$( echo "${StrGetBranch}" | sed -s 's/^[\t\ ]*\*/TRUE/g;s/^[\t\ ]\**/FALSE/g'  ; )
  
  local StrGetNewBranchName=$( zenity ${StrDefaultOpt} --height=${IntHeight} --width=${IntWidth} --title="${StrTitle}" --text="${StrSpanText//__TEXT__/${StrText}}" --column="${ArrayColumn[0]}" --column="${ArrayColumn[1]}"  ) ;  

 function GitCheckoutBranchAction()
 {
  local -a ArrayArg=( $* ) ;
  local -a __call_locality=( GCBA GitCheckoutBranchAction ) ;
  local Arg0="${ArrayArg[0]}";  
  local StrDefaultForceOpt="--force" ; 
  local StrDefaultAction="checkout" ; 
  local BoolForceCheckout=${GCBAIsForcedCheckout:=False} ; 
  local StrDefaultBranch=${GCBABranchName:=master} ;  
  local StrCmd="git __ACTION__ __OPT__ __BRANCH__"
  
  StrCmd=${StrCmd//__BRANCH__/${StrDefaultBranch}} ; 
  StrCmd=${StrCmd//__ACTION__/${StrDefaultAction}} ; 
  if [ "${BoolForceCheckout:=False}" == "True" ] ; then 
   StrCmd=${StrCmd//__OPT__/${StrDefaultForceOpt}} ; 
  else
   StrCmd=${StrCmd//__OPT__/} ; 
  fi 
  
  ${StrCmd} ; 
 
 }

 GCBABranchName=${StrGetNewBranchName} \
 GCBAIsForcedCheckout=${GCBEForceCheckout:=False} \
 GitCheckoutBranchAction  ; 


 }

fi

if [ "${versionGCBE:=0.0.1}" == "0.0.1" ] ; then 
  
 eval $( GFCFuncName=GitChckBranchEngine GlobalFunctionCleaning ) ;
 function GitChckBranchEngine()
 {
  function Verbosis()
  {
   local -a ArrayArg=( $* ) ; 
   local -a __call_locality=( Verb Verbosis )
   local StrMsg=${VerbMsg:=__TEXT__} ; 
   local StrDevOut=${VerbDev:=/dev/stderr} ; 
   local IsVerboseState=${VerbState:=False} ;
   local StrVerboseHeader=${VerbHeader:=VERBOSE} ;
   local IsEvalRequiredForm=${VerbEvalForm:=False} ; 
   local IsDisplayFormatted=${VerbFormated:=True} ;
   local IsAppendMode=${VerbAppendDev:=False} ; 
   if [ "${IsVerboseState:=False}" == "True" ] ; then 
    if [ "${IsDisplayFormatted:=True}" == "True" ] ; then 
     if [ "${IsAppendMode:=False}" == "True" ] ; then 
       echo -ne "${StrVerboseHeader}:[ ${StrMsg} ]\n" >> ${StrDevOut} ;
     else  
       echo -ne "${StrVerboseHeader}:[ ${StrMsg} ]\n" > ${StrDevOut} ;
     fi
    else
     if [ "${IsEvalRequiredForm:=False}" == "True" ] ; then 
        echo "${StrMsg}" ;  
     else
      if [ "${IsAppendMode:=False}" == "True" ] ; then 
       echo "${StrMsg}" >> ${StrDevOut} ;
      else
       echo "${StrMsg}" > ${StrDevOut} ;
      fi
     fi 
    fi 
   fi
  } 
  ### Model :VerbMsg=MSG VerbHeader=DEBUG VerbEvalForm=False VerbFormated=True VerbState=True VerbDev=/dev/stderr  Verbosis
  
  if [ "${versionCA:=0.0.0}" == "0.0.0" ] ; then 
   local -a ArrayArg=( $* ) ;
   local -a __call_locality=( GCBE GitChckBranchEngine ) ;
   local Arg0="${ArrayArg[0]}";  
   local StrStartMain=${GCBEFuncStart:=__main_StartServices} ; 
   local StrParentApps=${__call_locality[1]} ; 
  elif [ "${versionCA:=0.0.0}" == "0.0.1" ] ; then 
   eval $( eval CAFunctName=GitChckBranchEngine CAIsAddParent=False __Call_Argument ) ; 
  elif [ "${versionCA:=0.0.0}" == "0.0.2" ] ; then 
   eval $( eval CAFunctName=GitChckBranchEngine CAIsAddParent=False CallArgument ) ; 
  fi

  local StrGitApps=${GCBEGitApps:=/usr/bin/git} ; 
  local StrZenityApps=${GCBEZenityApps:=/usr/bin/zenity} ;
  local StrFilterApps=${GCBEFilterApps:=/bin/sed} ; 
  local StrGitBranchQuery=${GCBEGitBranchTpl:=__APPS__ branch -l} ;
  local StrZenityTpl=${GCBEZenityTpl:="""__APPS__ __OPT__ --height=__HEIGHT__ --width=__WIDTH__ --title=\"__TITLE__\" --text=\" __TEXT__ \" --column=\"__COLS0__\" --column=\"__COLS1__\" """} ; 
  local StrTitle=${GCBETitle:='Zenity/Git Checkout Branch engine'} ; 
  local StrText=${GCBEText:="Branch and activity, Selecting one will change\\\nthe default active branch by a checkout"} ; 
  local StrFontSize=${GCBEFontSize:=medium};
  local StrFontFamily=${GCBEFontFamily:=monospace} ; 
  local StrSpanText=${GCBETextSpanStyle:="""<span font_family='__FONT_NAME__' size='__FONT_SIZE__'> __TEXT__ </span>"""} ; 
  local IntHeight=${GCBEWinHeight:=300} ; 
  local IntWidth=${GCBEWinWidth:=300}; 
  local BoolDisplayCheckOut=${GCBEDisplayCheckOut:=False} ; 
  local BoolForceCheckout=${GCBEForceCheckout:=False} ; 
  local BoolDisplayZenityCall=${GCBEDisplayZenity:=False} ; 
  local BoolDisplayRegExpOp=${GCBEDisplayRegExpFilter:=False} ; 
  local StrDefaultOpt=${GCBEZenityDefaultOpt:=--list --radiolist} ; 
  
  local -a ArrayColumn ; 
  ArrayColumn[0]="Active Branch" ; 
  ArrayColumn[1]="Branch name" ; 
  
  local -a ArrayMsg ;
  ArrayMsg[0]="Entry in function" ;
  ArrayMsg[1]="Zenity Windows manager receive a cancel action by the user."
  ArrayMsg[2]="Application git have created an exception, ensure you are inside a git repository." ; 

  local StrVarList="StrZenityTpl,StrFilterApps,StrZenityApps,StrGitBranchQuery,StrGitApps,StrTitle,StrText,StrFontSize,StrFontFamily,StrSpanText,IntHeight,IntWidth,StrDefaultOpt,BoolDisplayRegExpOp,BoolForceCheckout,BoolDisplayZenityCall,BoolDisplayCheckOut" ; 
  
  function GitCheckoutBranchAction()
  {
   if [ ${versionCA:=0.0.0} == "0.0.0" ] ; then 
    local -a ArrayArg=( $* ) ;
    local -a __call_locality=( GCBA GitCheckoutBranchAction ${StrParentApps} ) ;
    local Arg0="${ArrayArg[0]}";  
   elif [ ${versionCA:=0.0.0} == "0.0.1" ] ; then 
    eval $( eval CAFunctName=GitCheckoutBranchAction CAIsAddParent=True __Call_Argument ) ; 
   elif [ ${versionCA:=0.0.0} == "0.0.2" ] ; then 
    eval $( eval CAFunctName=GitCheckoutBranchAction CAIsAddParent=True CallArgument ) ; 
   fi 
   local StrDefaultGitApps=${GCBAGitApps:=/usr/bin/git} ; 
   local StrDefaultForceOpt=${GCBAForceOpt:=--force} ; 
   local StrDefaultAction=${GCBAGitAction:=checkout} ; 
   local BoolForceCheckout=${GCBAIsForcedCheckout:=False} ;
   local StrDefaultBranch=${GCBABranchName:=master} ;  
   local BoolDisplayCmd=${GCBADisplayCheckOut:=False} ; 
   local StrCmd=${GCBACmdTpl:=__APPS__ __ACTION__ __OPT__ __BRANCH__} ; 
   
   
   StrCmd=${StrCmd//__APPS__/${StrDefaultGitApps}} ; 
   StrCmd=${StrCmd//__BRANCH__/${StrDefaultBranch}} ; 
   StrCmd=${StrCmd//__ACTION__/${StrDefaultAction}} ; 
   if [ "${BoolForceCheckout:=False}" == "True" ] ; then 
    StrCmd=${StrCmd//__OPT__/${StrDefaultForceOpt}} ; 
   else
    StrCmd=${StrCmd//__OPT__/} ; 
   fi 
   
   VerbMsg="${StrCmd}" VerbHeader="${__call_locality[1]}-CMD" VerbEvalForm=False VerbFormated=True VerbState=${BoolDisplayCmd} VerbDev=/dev/stderr  Verbosis ; 
   
   ${StrCmd} ; 
  
  }
  
  function __main_StopServices()
  {
   if [ ${versionCA:=0.0.0} == "0.0.0" ] ; then 
    local -a ArrayArg=( $* ) ;
    local -a __call_locality=( Main __main_StopServices ${StrParentApps} ) ;
    local Arg0="${ArrayArg[0]}";  
   elif [ ${versionCA:=0.0.0} == "0.0.1" ] ; then 
    eval $( eval CAFunctName=__main_StopServices CAIsAddParent=True __Call_Argument ) ; 
   elif [ ${versionCA:=0.0.0} == "0.0.2" ] ; then 
    eval $( eval CAFunctName=__main_StopServices CAIsAddParent=True CallArgument ) ; 
   fi 

  }
  
  function FilterSed()
  {
   if [ ${versionCA:=0.0.0} == "0.0.0" ] ; then 
    local -a ArrayArg=( $* ) ;
    local -a __call_locality=( FilterSed FS ${StrParentApps} ) ;
    local Arg0="${ArrayArg[0]}";  
   elif [ ${versionCA:=0.0.0} == "0.0.1" ] ; then 
    eval $( eval CAFunctName=__main_StartServices CAIsAddParent=True __Call_Argument ) ; 
   elif [ ${versionCA:=0.0.0} == "0.0.2" ] ; then 
    eval $( eval CAFunctName=__main_StartServices CAIsAddParent=True CallArgument ) ; 
   fi 
   
   local StrFilterApps=${FSFilterApps:=/bin/sed} ; 
   local StrFilterAppsTpl=${FSFilterAppsTpl:=__APPS__ __OPT__ __REGEXP__ | __FILTER__ __FILTER_OPT__ } ; 
   local StrFilterOpt=${FSFilterOpt:=-s} ; 
   local StrFilterReg=${FSFilterReg:="""'s/^[\t\ ]*\*/TRUE/g;s/^[\t\ ]\**/FALSE/g'"""} ;
   local StrPostFilterApps=${FSPostFilterApps:=/usr/bin/tr};
   local StrPostFilterOpt=${FSPostFilterOpt:=\'[:cntrl:]\' \' \'};
   local BoolDisplayDebug=${FSDisplayDebug:=False} ; 
   
   StrFilterAppsTpl=${StrFilterAppsTpl//__APPS__/${StrFilterApps}} ; 
   StrFilterAppsTpl=${StrFilterAppsTpl//__OPT__/${StrFilterOpt}} ; 
   StrFilterAppsTpl=${StrFilterAppsTpl//__REGEXP__/${StrFilterReg}} ; 
   StrFilterAppsTpl=${StrFilterAppsTpl//__FILTER__/${StrPostFilterApps}} ; 
   StrFilterAppsTpl=${StrFilterAppsTpl//__FILTER_OPT__/${StrPostFilterOpt}} ; 
   
   VerbMsg="${StrFilterAppsTpl}" VerbHeader="${__call_locality[1]}-CMD" VerbEvalForm=False VerbFormated=True VerbState=${BoolDisplayDebug} VerbDev=/dev/stderr  Verbosis ; 
   eval ${StrFilterAppsTpl} ; 
  }
  
  function ZenityWindowHandler()
  {
   if [ ${versionCA:=0.0.0} == "0.0.0" ] ; then 
    local -a ArrayArg=( $* ) ;
    local -a __call_locality=( ZWH ZenityWindowHandler ${StrParentApps} ) ;
    local Arg0="${ArrayArg[0]}";  
   elif [ ${versionCA:=0.0.0} == "0.0.1" ] ; then 
    eval $( eval CAFunctName=ZenityWindowHandler CAIsAddParent=True __Call_Argument ) ; 
   elif [ ${versionCA:=0.0.0} == "0.0.2" ] ; then 
    eval $( eval CAFunctName=ZenityWindowHandler CAIsAddParent=True CallArgument ) ; 
   fi 
   VerbMsg="${StrBranchToZenityField}" VerbHeader="${__call_locality[1]}-ZENITY-FIELD" VerbEvalForm=False VerbFormated=True VerbState=${BoolDisplayZenityCall} VerbDev=/dev/stderr  Verbosis ; 
        
   
   local StrSpanTextParsing="""${StrSpanText}""" ;
   StrSpanTextParsing=${StrSpanTextParsing//__FONT_NAME__/${StrFontFamily}} ; 
   StrSpanTextParsing=${StrSpanTextParsing//__FONT_SIZE__/${StrFontSize}} ; 
   StrSpanTextParsing=${StrSpanTextParsing//__TEXT__/${StrText}} ; 
   
   local StrCol0=$( ${StrParentApps} --get ArrayColumn[0] )
   local StrCol1=$( ${StrParentApps} --get ArrayColumn[1] )
   local StrZenityParsing="""${StrZenityTpl}""" ; 
   
   StrZenityParsing=${StrZenityParsing//__APPS__/${StrZenityApps}} ;
   StrZenityParsing=${StrZenityParsing//__OPT__/${StrDefaultOpt}} ;
   StrZenityParsing=${StrZenityParsing//__HEIGHT__/${IntHeight}} ;
   StrZenityParsing=${StrZenityParsing//__WIDTH__/${IntWidth}} ;
   StrZenityParsing=${StrZenityParsing//__TITLE__/${StrTitle}} ;
   StrZenityParsing=${StrZenityParsing//__TEXT__/${StrSpanTextParsing}} ;
   StrZenityParsing=${StrZenityParsing//__COLS0__/${StrCol0}} ;
   StrZenityParsing=${StrZenityParsing//__COLS1__/${StrCol1}} ;
   
   
   local StrBVTZenity="__IF__ __ELSE__" ;
   local StrMsg=$( ${StrParentApps} --get ArrayMsg[1] ) ; 
   local StrIfTpl="""GCBAGitApps=\${StrGitApps} GCBABranchName=__BRANCH__ GCBAIsForcedCheckout=\${BoolForceCheckout} GCBADisplayCheckOut=\${BoolDisplayCheckOut} __FNCT_ASRT__""" ; 
   local StrElseTpl="""VerbMsg=\"__MSG__\" VerbHeader=\"__HEADER__\" VerbEvalForm=False VerbFormated=True VerbState=True VerbDev=/dev/stderr __FNCT_ASRT__""" ; 
   StrElseTpl=${StrElseTpl//__MSG__/$( ${StrParentApps} --get ArrayMsg[1] )} ; 
   StrElseTpl=${StrElseTpl//__HEADER__/${__call_locality[1]}-ERROR} ; 
   
   ### This BoolVarTest use the BVTIfType="Int" property and the newly added 
   ### BVTQuoteIntLeftMember=True that force puting 'Variable' into '${Variable}'
   ### make easier for Integer test we don't have to wrap BVTVarName with quote
   ### or dollar. Also making possible to apply a default value more easy:
   ### BVTVarName="IntResultZenity:=0" will be quoted inside the if-statement into
   ### [${IntResultZenity:=0} __OP__ __DEFAULT_BOOL_TEST__ ].  
   ### BVTQuoteIntLeftMember=True, work only for BVTIfType="Int", it's innefective 
   ### for String type .
   ### Here description of 2-BoolVarTest 1, if statement, 2-else statement
   ### both are parsed inside StrBVTZenity and can be evaluated later like inside
   ### StrGetNewBranchName  . 
   local StrBVTZenityIf=$( BVTBoolVarName=IntResultZenity:=0 \
                           BVTIdType=4 \
                           BVTIfType="Int" \
                           BVTQuoteIntLeftMember=True \
                           BVTVarName=IntResultZenity \
                           BVTVarHold="\${IntReturn}" \
                           BVTIfOp=-eq \
                           BVTBoolCase=0 \
                           BVTIsValueToVarAssert=True \
                           BVTVTFnctA=GitCheckoutBranchAction \
                           BVTVTVTPLA="${StrIfTpl}" \
                           BVTDisplayShowDebug=False \
                           BoolVarTest ) ; 
   local StrBVTZenityElse=$( BVTIdType=5 \
                             BVTIsPreambule=False \
                             BVTIsValueToVarAssert=True \
                             BVTVTFnctA=Verbosis \
                             BVTVTVTPLA=${StrElseTpl} \
                             BVTDisplayShowDebug=False \
                             BoolVarTest ) ; 
   
   
   StrBVTZenity=${StrBVTZenity//__IF__/${StrBVTZenityIf}} ;
   StrBVTZenity=${StrBVTZenity//__ELSE__/${StrBVTZenityElse}} ;
   VerbMsg="${StrBVTZenity}" VerbHeader="${__call_locality[1]}-CMD" VerbEvalForm=False VerbFormated=True VerbState=${BoolDisplayZenityCall} VerbDev=/dev/stderr  Verbosis ; 
   VerbMsg="${StrZenityParsing} ${StrBranchToZenityField}" VerbHeader="${__call_locality[1]}-CMD" VerbEvalForm=False VerbFormated=True VerbState=${BoolDisplayZenityCall} VerbDev=/dev/stderr  Verbosis ; 
   
   ### It's possible, to launch other evaluation insde an executive brace and 
   ### as long the output is going inside /dev/sdterr, it will not interfere
   ### with the reception of the informtaion from a function. 
   local IntReturn ;
   
   eval ${StrZenityParsing} ${StrBranchToZenityField} > .ZenityWindowHandler ;
   IntReturn=$? ;
   VerbMsg="Status returned ${IntReturn}" VerbHeader="${__call_locality[1]}-ERROR-LEVEL" VerbEvalForm=False VerbFormated=True VerbState=${BoolDisplayZenityCall} VerbDev=/dev/stderr  Verbosis ; 
   local StrGetNewBranchName=$( cat .ZenityWindowHandler )  ; 
   eval "${StrBVTZenity//__BRANCH__/${StrGetNewBranchName}}" ;
   rm -f .ZenityWindowHandler ; 
   
   
   #eval ${StrBVTZenity} ; 


  
   #GCBAGitApps=${StrGitApps} GCBABranchName=${StrGetNewBranchName} GCBAIsForcedCheckout=${BoolForceCheckout} GCBADisplayCheckOut=${BoolDisplayCheckOut} GitCheckoutBranchAction  ; 
   
  }
  
  function __main_StartServices()
  {
   if [ ${versionCA:=0.0.0} == "0.0.0" ] ; then 
    local -a ArrayArg=( $* ) ;
    local -a __call_locality=( Main __main_StartServices ${StrParentApps} ) ;
    local Arg0="${ArrayArg[0]}";  
   elif [ ${versionCA:=0.0.0} == "0.0.1" ] ; then 
    eval $( eval CAFunctName=__main_StartServices CAIsAddParent=True __Call_Argument ) ; 
   elif [ ${versionCA:=0.0.0} == "0.0.2" ] ; then 
    eval $( eval CAFunctName=__main_StartServices CAIsAddParent=True CallArgument ) ; 
   fi 
  
   ### This section is Preparing the If-Else statement where it sould be used right
   ### after execution of StrBranchToZenityField
   local StrVarListZWH="BoolDisplayCheckOut,BoolDisplayZenityCall,BoolForceCheckout,IntHeight,IntWidth,StrBranchToZenityField,StrCol0,StrCol1,StrDefaultOpt,StrFontFamily,StrFontSize,StrGetNewBranchName,StrGitApps,StrParentApps,StrSpanText,StrSpanTextParsing,StrText,StrTitle,StrZenityApps,StrZenityParsing,StrZenityTpl" ;
   

   ### This is transforming the star inside the text showed from 'git branch -l' 
   ### into TRUE, and rest of the sed query does apply a FALSE on begin of line
   ### where there is no star. Especially particular the second filter inside the 
   ### sed does require to filter for [\t\ ] (tab and space) and '*' even it there
   ### is already a transformation of the star into 'TRUE'.
   local IntResultZenity ; 
   local StrBranchToZenityField=$( ${StrGitBranchQuery//__APPS__/${StrGitApps}} | FSFilterApps=${StrFilterApps} FSDisplayDebug=${BoolDisplayRegExpOp} FilterSed ) ;
   ### While StrBranchToZenityField is processing, it loosing the return-statement of 
   ### git branch -l and should be launched from a function where the code
   ### can isolate the return statement and filter error 128 from git branch -l 
   ### to define being outside of any repository and can't get a branch name at all.
   $( VTVIsArrayStyleInsert=True  \
       VTVValueEntry=${StrVarListZWH} \
       VTVIsQuotedValue=True       \
       VTVIsValueReAssign=True     \
       VTVIsValueToConvert=False   \
       ValueToVariable ) ZenityWindowHandler ; 
    
 }
  
  local StrSwitchMessages="${StrSwitchesShow}${StrStartSwitches}\n${StrGetMsgSwitches}\n${StrListMsgSwitches}\n${StrCompWordMsgSwitches}\n" ;
  local StrNameHelper="${__call_locality[1]}\n\tEngine to Activate Checkout if Git having many branch.";
  local StrSummary="\n\tThis appliaction turn git-branch into Zenity List windows with selection pointed to default choice, let you\n\tchange it to something else within listed branch." ; 
  local StrSynopsis="\n\tCalling GitChckBranchEngine will directly load you the Branch inside a project. It remains your to be inside\n\ta Git project to see available information.\n\tOption like git checkout <BRANCH-NAME> --force are replaced by Prefixed variable GCBEForceCheckout=True:\n\tGCBEForceCheckout=True GitChckBranchEngine";
  local StrDescription="\n\tAll SPAN markup from pango for Zenity project can be see at :\n\t\thttps://developer.gnome.org/pango/stable/PangoMarkupFormat.html.\n\tWhere Font-size is word representation such as \n\t\t:  'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large', rather than font='12.5' and size='12800'. \n\tFont-Family can be True-type, or any imported Open Text Format." ;

 if [ "${Arg0:=--startservices}" == "--help"	] ; then 
   GVRIsName=True     \
   GVRIsSynopsis=True \
   GVRIsSummary=True  \
   GVRIsDesc=True     \
   GVRIOldPrefix=False  GetVarReference ${__call_locality[1]} ;
   echo -ne "${StrSwitchMessages}" > /dev/stderr ; 
  elif [ "${Arg0:=--startservices}" == "--get" ] ; then 
   eval """local ArgGet=\${${ArrayArg[1]}}""" ; 
   echo -ne """${ArgGet}\n""" ;
  elif [ "${Arg0:=--startservices}" == "--list" ] ; then 
   eval $( __GetVarReferenceList ) ;	
  elif [ "${Arg0:=--startservices}" == "--stopservices" ] ; then 
   eval $( eval VTVIsArrayStyleInsert=True  \
             VTVValueEntry=${StrVarList} \
             VTVIsQuotedValue=True       \
             VTVIsValueReAssign=True     \
             VTVIsValueToConvert=False   \
             ValueToVariable ) __main_StopServices ;
  elif [ "${Arg0:=--startservices}" == "--startservices" ] ; then 
   eval $( eval VTVIsArrayStyleInsert=True  \
                VTVValueEntry=${StrVarList} \
                VTVIsQuotedValue=True       \
                VTVIsValueReAssign=True     \
                VTVIsValueToConvert=False   \
                ValueToVariable ) ${StrStartMain} ; 
  fi
 
 }


fi

### Agreed Services, GitCommitTransaction
if [ ${SubGitCommitTransaction:=False} == "True" ] ; then   

if [ ${versionGCT:=0.0.1} == "0.0.1" ] ; then 
### This is also a prototyped GitCommitTransaction it is not 
### conformant to Fnct.D Lib and having poor manageability 
### sometimes font can change size erraticaly from instance 
### to another one . 

 eval $( GFCFuncName=GetFileBuffered GlobalFunctionCleaning ) ;
 #unset GetFileBuffered ; 
 function GetFileBuffered()     
 {
  local StrQuestion="""Keep File selection\n\n__filelist__""" ;
  local IOStatus=0;
  filelist=$( cat .file-selection | sed -r 's/\ +/ \n/g' ) ; 
  zenity --question --text "${StrQuestion//__filelist__/${filelist}}" ;  
  IOStatus=$?
  return ${IOStatus} ;
 } ;

 eval $( GFCFuncName=GetCommandQuit GlobalFunctionCleaning ) ;
 #unset GetCommandQuit ; 
 function GetCommandQuit()    
 {
  local StrQuestion="""Quit Git Commit transaction ?""" ;
  local IOStatus=0;
  zenity --question --text "${StrQuestion}" ;  
  IOStatus=$?
  return ${IOStatus} ;
 } ;

 eval $( GFCFuncName=GetCommitMsg GlobalFunctionCleaning ) ;
 #unset GetCommitMsg ; 
 function GetCommitMsg()    
 {
  #echo > .commit-msg ;
  if [ -f .commit-msg ] ; then 
   rm -f .commit-msg ; 
  fi
  touch .commit-msg ; 
  local StrCheckBoxMsg="Ready to commit, protected against Error." ;
  local IOStatus ; 
  zenity --text-info --editable --checkbox="${StrCheckBoxMsg}" --width=400 --height=400 --font=12 > .commit-msg ; 
  IOStatus=$?
  return ${IOStatus} ;
 } ;

 eval $( GFCFuncName=git_update GlobalFunctionCleaning ) ;
 #unset git_update ;
 function git_update ()    
 { 
     #sudo /etc/init.d/iptables-persistent restart ;
     #sleep 5 ;
     local IOStatus=0 ; 
     local StrTestWarnInfo="""\nFollowing command will be executed\n"""
     local StrCmdUpdate="""git push origin master"""
     local StrCmd=$( zenity --entry --width="300" --text=${StrTestWarnInfo} --entry-text="${StrCmdUpdate}" ) ; 
     IOStatus=$?
     if [ ${IOStatus:=0} -eq 0  ] ; then 
      eval ${StrCmd} ; 
     fi 
 } ; 

 eval $( GFCFuncName=ZenityFileSelection GlobalFunctionCleaning ) ;
 #unset ZenityFileSelection ; 
 function ZenityFileSelection()
 {
  local IOStatus=0;
  if [ -f .file-selection ] ; then 
   rm -f .file-selection ; 
  fi 
  cd  ${StrWorkPath:=${HOME}} ;
  zenity --file-selection --multiple --separator='  '  > .file-selection ; 
  IOStatus=$?
  return ${IOStatus} ;
 }


 eval $( GFCFuncName=GetFileInPath GlobalFunctionCleaning ) ;
 #unset GetFileInPath ; 
 function GetFileInPath()    
 {
   local IOStatus=0 ; 
   local IntSizeFile=$( wc -c .file-selection | cut -d ' ' -f 1  ) ;  
   local StrWorkPath=${GitPath:=/home/maxiste/github/Fnct.D/} ; 
   
   if [ ${IntSizeFile:=0} -gt 0 ] ; then 
    ### Case existing file and asking to keep them 
    GetFileBuffered ; 
    IOStatus=$? ; 
    if [ ${IOStatus:=0} -eq 1  ] ; then
     StrWorkPath=${StrWorkPath} ZenityFileSelection
     IOStatus=$? ;
    else
     IOStatus=0 ; 
    fi 
   else
     rm -f .file-selection ; 
     touch .file-selection ; 
     StrWorkPath=${StrWorkPath} ZenityFileSelection
     IOStatus=$? ;
   fi 
   IOStatus=$? ;
  return ${IOStatus} ;   
 } ;

 eval $( GFCFuncName=CommitLevel GlobalFunctionCleaning ) ;
 #unset CommitLevel ; 
 function CommitLevel()
 {
  StrMsg=$( cat .commit-msg ) ;
  ArrayFileList=( $( cat .file-selection ) ) ;  
  echo """git commit -m \"${StrMsg}\" ${ArrayFileList[@]}""" ; 
  git commit -m """${StrMsg}""" ${ArrayFileList[@]} ; 
  sleep 5 ; 
  echo git_update ;
  git_update ;
 }

 eval $( GFCFuncName=GitCommitTransaction GlobalFunctionCleaning ) ;
 #unset GitCommitTransaction ; 
 function GitCommitTransaction()    
 {
   local IntQuit=1 ; 
   local IntComitSig=0 ; 
   local IntFileInPathSig=0 ; 
   local StrMsg="" ; 
   local ArrayFileList=( ) ;
   local StrWorkPath=${GitPath:=/home/maxiste/github/Fnct.D/} ;
   if [ -f .commit-msg ] ; then 
    rm -f .commit-msg .file-selection ; 
   fi 
   touch .commit-msg ;
   touch .file-selection ;


   while [ ${IntQuit:=1} -ne 0 ] ; do 
    ### Get FileInPath Signal:
    GitPath=${StrWorkPath} GetFileInPath
    IntFileInPathSig=$? ; 
    ### Get Commit Signal:
    if [ ${IntFileInPathSig:=0} -eq 0 ] ; then 
      ### Get the commit Message.
      GetCommitMsg ;
      IntComitSig=$? ;
     if [ ${IntComitSig:=1} -eq 0 ] ; then 
      CommitLevel
     fi
    else 
      GetCommandQuit 
      IntComitSig=$? ; 
      if  [ ${IntComitSig:=0} -eq 0 ] ; then 
        IntQuit=0 ; 
      fi
    fi 
    GetCommandQuit ; 
    IntComitSig=$? ; 
    if  [ ${IntComitSig:=0} -eq 0 ] ; then 
      IntQuit=0 ; 
    fi 
    sleep 5 ;
   done ; 
   rm -f .commit-msg .file-selection ; 
}

### End of if-versionGCT==0.0.1
fi

if [ "${versionGCT:=0.0.1}" == "0.0.2" ] ; then 



### This is also a prototyped GitCommitTransaction it is not 
### conformant to Fnct.D Lib and having poor manageability 
### sometimes font can change size erraticaly from instance 
### to another one . 
 eval $( GFCFuncName=GitRessourceInformation GlobalFunctionCleaning ) ;
 #unset GitRessourceInformation;
 function GitRessourceInformation()
 {
  eval $( CAFunctName=GitRessourceInformation CAIsAddParent=False __Call_Argument ) ; 

  local StrFileBuffer=${GRIFileBuffer:=.file-selection} ;
  local StrCommitBuffer=${GRICommitBuffer:=.commit-msg} ; 
  local BoolTouchCommit=${GRIIsTouchCommit:=True} ;
  local BoolTouchFile=${GRIIsTouchFile:=True} ; 
  local IOStatus=0 ; 
  local StrFileList="" ;
  local IntSizeFile=0 ;
  
  if [ -f ${StrFileBuffer} ] ; then 
    StrFileList=$( cat ${StrFileBuffer} | sed -r 's/\ +/ \n/g' ) ;
    IntSizeFile=$( wc -c ${StrFileBuffer} | cut -d ' ' -f 1  ) ;   
  fi   

  local StrVarList="StrVarList,StrQuestion,IOStatus,StrFileList,StrParentApps,StrStartMain,BoolTouchCommit,BoolTouchFile" ; 
  function Verbosis()
  {
   local __call_locality=( Verbosis Verb );
   local StrMsg=${VerbMsg:=__TEXT__} ; 
   local StrDevOut=${VerbDev:=/dev/stderr} ; 
   local IsVerboseState=${VerbState:=False} ;
   local StrVerboseHeader=${VerbHeader:=VERBOSE} ;
   local IsEvalRequiredForm=${VerbEvalForm:=False} ; 
   local IsDisplayFormatted=${VerbFormated:=True} ;
   local IsAppendMode=${VerbAppendDev:=False} ; 
   local ArrayArg=( $* ) ; 
   if [ "${IsVerboseState:=False}" == "True" ] ; then 
    if [ "${IsDisplayFormatted:=True}" == "True" ] ; then 
     if [ "${IsAppendMode:=False}" == "True" ] ; then 
       echo -ne "${StrVerboseHeader}:[ ${StrMsg} ]\n" >> ${StrDevOut} ;
     else  
       echo -ne "${StrVerboseHeader}:[ ${StrMsg} ]\n" > ${StrDevOut} ;
     fi
    else
     if [ "${IsEvalRequiredForm:=False}" == "True" ] ; then 
        echo "${StrMsg}" ;  
     else
      if [ "${IsAppendMode:=False}" == "True" ] ; then 
       echo "${StrMsg}" >> ${StrDevOut} ;
      else
       echo "${StrMsg}" > ${StrDevOut} ;
      fi
     fi 
    fi 
   fi
  } 
  ### Model :VerbMsg=MSG VerbHeader=DEBUG VerbEvalForm=False VerbFormated=True VerbState=True StrDevOut=/dev/stderr  Verbosis
    
  function InitializeCommitBuffer()
  {
   eval $( CAFunctName=InitializeCommitBuffer CAIsAddParent=True __Call_Argument ) ; 
   
   if [ -f ${StrCommitBuffer} ] ; then 
    rm -f ${StrCommitBuffer} ; 
   fi
   if [ "${BoolTouchCommit:=True}" == "True" ] ; then 
     touch ${StrCommitBuffer} ; 
   fi
  } 
  ### made to call a Initialisation of Commit Buffer, 
  ### GRIFuncStart=InitializeCommitBuffer GitRessourceInformation
  
  function InitializeFileBuffer()
  {
   eval $( CAFunctName=InitializeFileBuffer CAIsAddParent=True __Call_Argument ) ; 
   
   if [ -f ${StrFileBuffer} ] ; then 
    rm -f ${StrFileBuffer} ; 
   fi
   if [ "${BoolTouchFile:=True}" == "True" ] ; then 
     touch ${StrFileBuffer} ; 
   fi
  } 
  ### made to call a Initialisation of Commit Buffer, 
  ### GRIFuncStart=InitializeFileBuffer GitRessourceInformation
  
  function __main_StartServices()
  {
   eval $( CAFunctName=__main_StartServices CAIsAddParent=True __Call_Argument ) ; 
 
  }
    
  local StrSwitchMessages="${StrSwitchesShow}${StrStartSwitches}\n${StrGetMsgSwitches}\n${StrListMsgSwitches}\n${StrCompWordMsgSwitches}\n" ;
  local StrNameHelper="__FUNCT__\tStand for ";
  local StrSummary="This __FUNCT__" ; 
  local StrSynopsis="Soon to Document this __FUNCT__";
  local StrDescription="This section contain Detailed information for __FUNCT__" ;
  
  if [ "${Arg0:=--startservices}" == "--help"	] ; then 
   GVRIsName=False GVRIsSynopsis=False GVRIsSummary=False GVRIsDesc=False GetVarReference ${__call_locality[1]} ; 
   echo -ne "${StrSwitchMessages}" > /dev/stderr ; 
  elif [ "${Arg0:=--startservices}" == "--get" ] ; then 
   eval """local ArgGet=\${${ArrayArg[1]}}""" ; 
   echo -ne """${ArgGet}\n""" ;
  elif [ "${Arg0:=--startservices}" == "--list" ] ; then 
   eval $( __GetVarReferenceList ) ;	
  elif [ "${Arg0:=--startservices}" == "--startservices" ] ; then 
   eval $( VTVIsArrayStyleInsert=True \
        VTVValueEntry=${StrVarList}   \
        VTVIsValueReAssign=True       \
        VTVIsValueToConvert=False     \
        VTVIsArrayStyleInsert=True    \
        ValueToVariable ) ${StrStartMain} ; 
  fi
  
 }

 eval $( GFCFuncName=GetFileBuffered GlobalFunctionCleaning ) ;
 #unset GetFileBuffered ; 
 function GetFileBuffered()     
 {
  eval $( CAFunctName=GetFileBuffered CAIsAddParent=False __Call_Argument ) ; 
  local StrQuestion=${GFBQuestion:="Keep File selection\n\n__FILELIST__"} ;
  local StrWorkPath=${GitPath:=${GFBPath:=/home/maxiste/github/Fnct.D/}} ;
  local IOStatus=0;
  local StrFileBuffer=$( GitRessourceInformation --get GRIFileBuffer ) ;
  local StrFileList=$( GitRessourceInformation --get StrFileList ) ; 

  local StrVarList="StrVarList,StrQuestion,IOStatus,StrFileList,StrParentApps,StrStartMain,StrFileBuffer,StrWorkPath" ; 
  
  function __main_StartServices()
  {
   eval $( CAFunctName=__main_StartServices CAIsAddParent=True __Call_Argument ) ; 
   
   zenity --question --text "${StrQuestion//__FILELIST__/${StrFileList}}" ;  
   IOStatus=$?
   return ${IOStatus} ;
  }
  
  local StrSwitchMessages="${StrSwitchesShow}${StrStartSwitches}\n${StrGetMsgSwitches}\n${StrListMsgSwitches}\n${StrCompWordMsgSwitches}\n" ;
  local StrNameHelper="__FUNCT__\tStand for ";
  local StrSummary="This __FUNCT__" ; 
  local StrSynopsis="Soon to Document this __FUNCT__";
  local StrDescription="This section contain Detailed information for __FUNCT__" ;
  
  if [ "${Arg0:=--startservices}" == "--help"	] ; then 
   GVRIsName=False GVRIsSynopsis=False GVRIsSummary=False GVRIsDesc=False GetVarReference ${__call_locality[1]} ; 
   echo -ne "${StrSwitchMessages}" > /dev/stderr ; 
  elif [ "${Arg0:=--startservices}" == "--get" ] ; then 
   eval """local ArgGet=\${${ArrayArg[1]}}""" ; 
   echo -ne """${ArgGet}\n""" ;
  elif [ "${Arg0:=--startservices}" == "--list" ] ; then 
   eval $( __GetVarReferenceList ) ;	
  elif [ "${Arg0:=--startservices}" == "--startservices" ] ; then 
   return eval $( VTVIsArrayStyleInsert=True \
        VTVValueEntry=${StrVarList}   \
        VTVIsValueReAssign=True       \
        VTVIsValueToConvert=False     \
        VTVIsArrayStyleInsert=True    \
        ValueToVariable ) ${StrStartMain}
  fi
 } ;

 eval $( GFCFuncName=GetCommandQuit GlobalFunctionCleaning ) ;
 #unset GetCommandQuit ; 
 function GetCommandQuit()    
 {
  eval $( CAFunctName=GetCommandQuit CAIsAddParent=False __Call_Argument ) ; 

  local StrQuestion=${GCQQuestion:="Quit Git Commit transaction ?"} ;
  local StrWorkPath=${GitPath:=${GCQPath:=/home/maxiste/github/Fnct.D/}} ;
  local IOStatus=0;
  local StrVarList="StrVarList,StrQuestion,IOStatus,StrParentApps,StrStartMain" ; 
  
  function __main_StartServices()
  {
   eval $( CAFunctName=__main_StartServices CAIsAddParent=True __Call_Argument ) ; 

   zenity --question --text "${StrQuestion}" ;  
   IOStatus=$?
   return ${IOStatus} ;
  }
  
  local StrSwitchMessages="${StrSwitchesShow}${StrStartSwitches}\n${StrGetMsgSwitches}\n${StrListMsgSwitches}\n${StrCompWordMsgSwitches}\n" ;
  local StrNameHelper="__FUNCT__\tStand for ";
  local StrSummary="This __FUNCT__" ; 
  local StrSynopsis="Soon to Document this __FUNCT__";
  local StrDescription="This section contain Detailed information for __FUNCT__" ;
  
  if [ "${Arg0:=--startservices}" == "--help"	] ; then 
   GVRIsName=False GVRIsSynopsis=False GVRIsSummary=False GVRIsDesc=False GetVarReference ${__call_locality[1]} ; 
   echo -ne "${StrSwitchMessages}" > /dev/stderr ; 
  elif [ "${Arg0:=--startservices}" == "--get" ] ; then 
   eval """local ArgGet=\${${ArrayArg[1]}}""" ; 
   echo -ne """${ArgGet}\n""" ;
  elif [ "${Arg0:=--startservices}" == "--list" ] ; then 
   eval $( __GetVarReferenceList ) ;	
  elif [ "${Arg0:=--startservices}" == "--startservices" ] ; then 
   return eval $( VTVIsArrayStyleInsert=True \
        VTVValueEntry=${StrVarList}   \
        VTVIsValueReAssign=True       \
        VTVIsValueToConvert=False     \
        VTVIsArrayStyleInsert=True    \
        ValueToVariable ) ${StrStartMain}
  fi
 } ;

 eval $( GFCFuncName=GetCommitMsg GlobalFunctionCleaning ) ;
 #unset GetCommitMsg ; 
 function GetCommitMsg()    
 {
  eval $( CAFunctName=GetCommitMsg CAIsAddParent=False __Call_Argument ) ; 

  local StrCheckBoxMsg=${GCMCheckCase:="Ready to commit, protected against Error."} ;
  local IntFontSize=${GCMFontSize:=11} ; 
  local StrWorkPath=${GitPath:=${GCMPath:=/home/maxiste/github/Fnct.D/}} ;
  local IOStatus ; 
  local StrParentApps=${__call_locality[1]} ;
  local StrCommitBuffer=$( GitRessourceInformation --get GRICommitBuffer  ) ; 
  local IntSizeFile=$( GitRessourceInformation --get IntSizeFile  ) ;  
  
  local StrVarList="StrVarList,StrCheckBoxMsg,IOStatus,StrParentApps,IntFontSize" ; 
  function __main_StartServices()
  {
   eval $( CAFunctName= CAIsAddParent=True __Call_Argument ) ; 
   
   ### if [ -f ${StrCommitBuffer} ] ; then 
   ###  rm -f ${StrCommitBuffer} ; 
   ### fi
   #### touch ${StrCommitBuffer} ; 
   ### This is part is replaced by GRIFuncStart=InitializeCommitBuffer GitRessourceInformation
   GRIFuncStart=InitializeCommitBuffer GitRessourceInformation ;
   
   zenity --text-info --editable --checkbox="${StrCheckBoxMsg}" --width=400 --height=400 --font=${IntFontSize} > ${StrCommitBuffer} ; 
   IOStatus=$?
   return ${IOStatus} ;
  }
   
  local StrSwitchMessages="${StrSwitchesShow}${StrStartSwitches}\n${StrGetMsgSwitches}\n${StrListMsgSwitches}\n${StrCompWordMsgSwitches}\n" ;
  local StrNameHelper="__FUNCT__\tStand for ";
  local StrSummary="This __FUNCT__" ; 
  local StrSynopsis="Soon to Document this __FUNCT__";
  local StrDescription="This section contain Detailed information for __FUNCT__" ;
  
  
  if [ "${Arg0:=--startservices}" == "--help"	] ; then 
   GVRIsName=False GVRIsSynopsis=False GVRIsSummary=False GVRIsDesc=False GetVarReference ${__call_locality[1]} ; 
   echo -ne "${StrSwitchMessages}" > /dev/stderr ; 
  elif [ "${Arg0:=--startservices}" == "--get" ] ; then 
   eval """local ArgGet=\${${ArrayArg[1]}}""" ; 
   echo -ne """${ArgGet}\n""" ;
  elif [ "${Arg0:=--startservices}" == "--list" ] ; then 
   eval $( __GetVarReferenceList ) ;	
  elif [ "${Arg0:=--startservices}" == "--startservices" ] ; then 
   return eval $( VTVIsArrayStyleInsert=True \
        VTVValueEntry=${StrVarList}   \
        VTVIsValueReAssign=True       \
        VTVIsValueToConvert=False     \
        VTVIsArrayStyleInsert=True    \
        ValueToVariable ) ${StrStartMain}
  fi
 } ;

 eval $( GFCFuncName=GitUpdate GlobalFunctionCleaning ) ;
 #unset GitUpdate ;
 function GitUpdate ()    
 { 
  eval $( CAFunctName=GitUpdate CAIsAddParent=False __Call_Argument ) ; 

  local IOStatus=0 ; 
  local StrTestWarnInfo=${GUWarnInfo:="\nFollowing command will be executed\n"} ; 
  local StrWorkPath=${GitPath:=${GUPath:=/home/maxiste/github/Fnct.D/}} ;
  local StrCmdUpdate="""git push origin master"""
  local StrParentApps=${__call_locality[1]} ;
  local StrVarList="StrVarList,IOStatus,StrTestWarnInfo,StrCmdUpdate,StrParentApps,StrStartMain,StrWorkPath" ; 
  
  function __main_StartServices()
  {
   eval $( CAFunctName= CAIsAddParent=True __Call_Argument ) ; 

   local StrCmd=$( zenity --entry --width="300" --text=${StrTestWarnInfo} --entry-text="${StrCmdUpdate}" ) ; 
   
   #sudo /etc/init.d/iptables-persistent restart ;
   #sleep 5 ;
   IOStatus=$?
   if [ ${IOStatus:=0} -eq 0  ] ; then 
    eval ${StrCmd} ; 
   fi 
  }
  
  local StrSwitchMessages="${StrSwitchesShow}${StrStartSwitches}\n${StrGetMsgSwitches}\n${StrListMsgSwitches}\n${StrCompWordMsgSwitches}\n" ;
  local StrNameHelper="__FUNCT__\tStand for ";
  local StrSummary="This __FUNCT__" ; 
  local StrSynopsis="Soon to Document this __FUNCT__";
  local StrDescription="This section contain Detailed information for __FUNCT__" ;
  
  if [ "${Arg0:=--startservices}" == "--help"	] ; then 
   GVRIsName=False GVRIsSynopsis=False GVRIsSummary=False GVRIsDesc=False GetVarReference ${__call_locality[1]} ; 
   echo -ne "${StrSwitchMessages}" > /dev/stderr ; 
  elif [ "${Arg0:=--startservices}" == "--get" ] ; then 
   eval """local ArgGet=\${${ArrayArg[1]}}""" ; 
   echo -ne """${ArgGet}\n""" ;
  elif [ "${Arg0:=--startservices}" == "--list" ] ; then 
   eval $( __GetVarReferenceList ) ;	
  elif [ "${Arg0:=--startservices}" == "--startservices" ] ; then 
   return eval $( VTVIsArrayStyleInsert=True \
        VTVValueEntry=${StrVarList}   \
        VTVIsValueReAssign=True       \
        VTVIsValueToConvert=False     \
        VTVIsArrayStyleInsert=True    \
        ValueToVariable ) ${StrStartMain}
  fi
 } ; 

 eval $( GFCFuncName=ZenityFileSelection GlobalFunctionCleaning ) ;
 #unset ZenityFileSelection ; 
 function ZenityFileSelection()
 {
  eval $( CAFunctName=ZenityFileSelection CAIsAddParent=False __Call_Argument ) ; 

  local IOStatus=0;

  local StrWorkPath=${GitPath:=${ZFSPath:=/home/maxiste/github/Fnct.D/}} ; 
  local BoolUseAlternateFile=${ZFSIsAlternateSelection:=False} ; 
  local StrFileBuffer=$( GitRessourceInformation --get GRIFileBuffer ) ;
  local StrVarList="StrVarList,IOStatus,StrParentApps,StrStartMain,BoolUseAlternateFile,StrWorkPath,StrFileBuffer" ; 
  
  ### Tips: If you want to try the Alternate File selection, poping-you a zenity-list windows
  ### with all file from current path (agreed you have start GitCommitTransaction in your root Fnct.D repository) .
  ### just make an alias from your command line of ZenityFileSelection:
  ### alias ZenityFileSelection='ZFSIsAlternateSelection=True ZenityFileSelection'; and services 
  ### will popup a zenity-list. 
  
  function __main_StartServices()
  {
   eval $( CAFunctName=__main_StartServices CAIsAddParent=True __Call_Argument ) ; 

   GRIIsTouchFile=False GRIFuncStart=InitializeFileBuffer GitRessourceInformation ;

   if [ ${BoolUseAlternateFile:=False} == "True" ] ; then 
    zenity --list --text="File Selection from Repository" --column="Selection" --column="File" --checklist --multiple  --separator='  ' $( find ${StrWorkPath} -maxdepth 3 -type f -printf "FALSE %p " | sed 's/.\///g' | sort -k 2 ) > ${StrFileBuffer} ;  ### If it's not the time to eat a banana because it's already done ! 
    IOStatus=$? ;
   else
    cd  ${StrWorkPath:=${HOME}} ;
    zenity --file-selection --multiple --separator='  '  > ${StrFileBuffer} ; 
    IOStatus=$? ; 
   fi 
  
   return ${IOStatus} ;
  }

  local StrSwitchMessages="${StrSwitchesShow}${StrStartSwitches}\n${StrGetMsgSwitches}\n${StrListMsgSwitches}\n${StrCompWordMsgSwitches}\n" ;
  local StrNameHelper="__FUNCT__\tStand for ";
  local StrSummary="This __FUNCT__" ; 
  local StrSynopsis="Soon to Document this __FUNCT__";
  local StrDescription="This section contain Detailed information for __FUNCT__" ;
  
  
  if [ "${Arg0:=--startservices}" == "--help"	] ; then 
   GVRIsName=False GVRIsSynopsis=False GVRIsSummary=False GVRIsDesc=False GetVarReference ${__call_locality[1]} ; 
   echo -ne "${StrSwitchMessages}" > /dev/stderr ; 
  elif [ "${Arg0:=--startservices}" == "--get" ] ; then 
   eval """local ArgGet=\${${ArrayArg[1]}}""" ; 
   echo -ne """${ArgGet}\n""" ;
  elif [ "${Arg0:=--startservices}" == "--list" ] ; then 
   eval $( __GetVarReferenceList ) ;	
  elif [ "${Arg0:=--startservices}" == "--startservices" ] ; then 
   return eval $( VTVIsArrayStyleInsert=True \
        VTVValueEntry=${StrVarList}   \
        VTVIsValueReAssign=True       \
        VTVIsValueToConvert=False     \
        VTVIsArrayStyleInsert=True    \
        ValueToVariable ) ${StrStartMain}
  fi
 }


 eval $( GFCFuncName=GetFileInPath GlobalFunctionCleaning ) ;
 #unset GetFileInPath ; 
 function GetFileInPath()    
 {
  eval $( CAFunctName=GetFileInPath CAIsAddParent=False __Call_Argument ) ; 

  local IOStatus=0 ; 
  local StrFileBuffer=$( GitRessourceInformation --get GRIFileBuffer ) ;
  local IntSizeFile=$( GitRessourceInformation --get IntSizeFile ) ; 

  
  local StrWorkPath=${GitPath:=${GFIPath:=/home/maxiste/github/Fnct.D/}} ; 
  local StrParentApps=${__call_locality[1]} ;
  local StrVarList="StrVarList,StrParentApps,StrWorkPath,IOStatus,IntSizeFile,StrStartMain,StrFileBuffer,BoolUseAlternateFile" ; 
  
  function __main_StartServices()
  {
   eval $( CAFunctName=__main_StartServices CAIsAddParent=True __Call_Argument ) ; 
   
   if [ ${IntSizeFile:=0} -gt 0 ] ; then 
    ### Case existing file and asking to keep them 
    GetFileBuffered ; 
    IOStatus=$? ; 
    if [ ${IOStatus:=0} -eq 1  ] ; then
     ZFSPath=${StrWorkPath} BoolUseAlternateFile=${BoolUseAlternateFile} ZenityFileSelection
     IOStatus=$? ;
    else
     IOStatus=0 ; 
    fi 
   else
     ###rm -f ${StrFileBuffer} ; 
     ###touch ${StrFileBuffer} ; 
     ### Replaced by GRIIsTouchFile=True GRIFuncStart=InitializeFileBuffer GitRessourceInformation
     ### and do a file-test in more.  
     GRIIsTouchFile=True GRIFuncStart=InitializeFileBuffer GitRessourceInformation ;
     ZFSPath=${StrWorkPath} BoolUseAlternateFile=${BoolUseAlternateFile} ZenityFileSelection
     IOStatus=$? ;
   fi 
   IOStatus=$? ;
  return ${IOStatus} ;   
  
  }
  
  local StrSwitchMessages="${StrSwitchesShow}${StrStartSwitches}\n${StrGetMsgSwitches}\n${StrListMsgSwitches}\n${StrCompWordMsgSwitches}\n" ;
  local StrNameHelper="__FUNCT__\tStand for ";
  local StrSummary="This __FUNCT__" ; 
  local StrSynopsis="Soon to Document this __FUNCT__";
  local StrDescription="This section contain Detailed information for __FUNCT__" ;
  
  
  if [ "${Arg0:=--startservices}" == "--help"	] ; then 
   GVRIsName=False GVRIsSynopsis=False GVRIsSummary=False GVRIsDesc=False GetVarReference ${__call_locality[1]} ; 
   echo -ne "${StrSwitchMessages}" > /dev/stderr ; 
  elif [ "${Arg0:=--startservices}" == "--get" ] ; then 
   eval """local ArgGet=\${${ArrayArg[1]}}""" ; 
   echo -ne """${ArgGet}\n""" ;
  elif [ "${Arg0:=--startservices}" == "--list" ] ; then 
   eval $( __GetVarReferenceList ) ;	
  elif [ "${Arg0:=--startservices}" == "--startservices" ] ; then 
   return eval $( VTVIsArrayStyleInsert=True \
        VTVValueEntry=${StrVarList}   \
        VTVIsValueReAssign=True       \
        VTVIsValueToConvert=False     \
        VTVIsArrayStyleInsert=True    \
        ValueToVariable ) ${StrStartMain}
  fi

 } ;

 eval $( GFCFuncName=CommitLevel GlobalFunctionCleaning ) ;
 #unset CommitLevel ; 
 function CommitLevel()
 {
  eval $( CAFunctName=CommitLevel CAIsAddParent=False __Call_Argument ) ; 
  
  local StrWorkPath=${GitPath:=${CLPath:=/home/maxiste/github/Fnct.D/}} ;
  local StrCommitBuffer=$( GitRessourceInformation --get GRICommitBuffer  ) ; 
  local StrVarList="StrVarList,StrParentApps,StrStartMain,StrCommitBuffer,StrFileBuffer,StrWorkPath" ; 
  
  function __main_StartServices()
  {
   eval $( CAFunctName=__main_StartServices CAIsAddParent=True __Call_Argument ) ; 
  
   StrMsg=$( cat ${StrCommitBuffer} ) ;
   ArrayFileList=( $( cat ${StrFileBuffer} ) ) ;  
   echo """git commit -m \"${StrMsg}\" ${ArrayFileList[@]}"""  > /dev/stderr ; 
   git commit -m """${StrMsg}""" ${ArrayFileList[@]} ; 
   sleep 5 ; 
   echo GitUpdate > /dev/stderr;
   GitUpdate ;
  }
  
  local StrSwitchMessages="${StrSwitchesShow}${StrStartSwitches}\n${StrGetMsgSwitches}\n${StrListMsgSwitches}\n${StrCompWordMsgSwitches}\n" ;
  local StrNameHelper="__FUNCT__\tStand for ";
  local StrSummary="This __FUNCT__" ; 
  local StrSynopsis="Soon to Document this __FUNCT__";
  local StrDescription="This section contain Detailed information for __FUNCT__" ;
  
  
  if [ "${Arg0:=--startservices}" == "--help"	] ; then 
   GVRIsName=False GVRIsSynopsis=False GVRIsSummary=False GVRIsDesc=False GetVarReference ${__call_locality[1]} ; 
   echo -ne "${StrSwitchMessages}" > /dev/stderr ; 
  elif [ "${Arg0:=--startservices}" == "--get" ] ; then 
   eval """local ArgGet=\${${ArrayArg[1]}}""" ; 
   echo -ne """${ArgGet}\n""" ;
  elif [ "${Arg0:=--startservices}" == "--list" ] ; then 
   eval $( __GetVarReferenceList ) ;	
  elif [ "${Arg0:=--startservices}" == "--startservices" ] ; then 
   return eval $( VTVIsArrayStyleInsert=True \
        VTVValueEntry=${StrVarList}   \
        VTVIsValueReAssign=True       \
        VTVIsValueToConvert=False     \
        VTVIsArrayStyleInsert=True    \
        ValueToVariable ) ${StrStartMain}
  fi

 }

 eval $( GFCFuncName=GitCommitTransaction GlobalFunctionCleaning ) ;
 #unset GitCommitTransaction ; 
 function GitCommitTransaction()    
 {
  eval $( CAFunctName=GitCommitTransaction CAIsAddParent=False __Call_Argument ) ; 

  local IntQuit=1 ; 
  local IntComitSig=0 ; 
  local IntFileInPathSig=0 ; 
  local StrMsg="" ; 
  local StrFileBuffer=$( GitRessourceInformation --get GRIFileBuffer ) ;
  local StrCommitBuffer=$( GitRessourceInformation --get GRICommitBuffer  ) ; 
  
  local StrWorkPath=${GitPath:=${GCTPath:=/home/maxiste/github/Fnct.D/}} ;
  local StrVarList="StrFileBuffer,StrCommitBuffer,StrVarList,IntQuit,IntComitSig,IntFileInPathSig,StrMsg,StrParentApps,StrStartMain" ; 
  
  function __main_StartServices()
  {
   eval $( CAFunctName=__main_StartServices CAIsAddParent=True __Call_Argument ) ; 
   local ArrayFileList=( ) ;

   ### if [ -f ${StrCommitBuffer} ] ; then 
   ### rm -f ${StrCommitBuffer} ${StrFileBuffer} ; 
   ### fi 
   ### touch ${StrCommitBuffer} ;
   ### touch ${StrFileBuffer} ;
   ### replaced by next two lines .  
   GRIIsTouchCommit=True GRIFuncStart=InitializeCommitBuffer GitRessourceInformation
   GRIIsTouchFile=True GRIFuncStart=InitializeFileBuffer GitRessourceInformation


   while [ ${IntQuit:=1} -ne 0 ] ; do 
    ### Get FileInPath Signal:
    BoolUseAlternateFile=${BoolUseAlternateFile} GFIPath=${StrWorkPath} GetFileInPath
    IntFileInPathSig=$? ; 
    ### Get Commit Signal:
    if [ ${IntFileInPathSig:=0} -eq 0 ] ; then 
      ### Get the commit Message.
      GCMPath=${StrWorkPath} GetCommitMsg ;
      IntComitSig=$? ;
     if [ ${IntComitSig:=1} -eq 0 ] ; then 
      CommitLevel
     fi
    else 
      GCQPath=${StrWorkPath}  GetCommandQuit 
      IntComitSig=$? ; 
      if  [ ${IntComitSig:=0} -eq 0 ] ; then 
        IntQuit=0 ; 
      fi
    fi 
    GCQPath=${StrWorkPath}   GetCommandQuit ; 
    IntComitSig=$? ; 
    if  [ ${IntComitSig:=0} -eq 0 ] ; then 
      IntQuit=0 ; 
    fi 
    sleep 5 ;
   done ; 
   ### replaced by next two lines and does not make a touch, really erasing the files.
   ### rm -f ${StrCommitBuffer} ${StrFileBuffer} ; 
   GRIIsTouchCommit=False GRIFuncStart=InitializeCommitBuffer GitRessourceInformation
   GRIIsTouchFile=False GRIFuncStart=InitializeFileBuffer GitRessourceInformation

  }
  
  
  local StrSwitchMessages="${StrSwitchesShow}${StrStartSwitches}\n${StrGetMsgSwitches}\n${StrListMsgSwitches}\n${StrCompWordMsgSwitches}\n" ;
  local StrNameHelper="__FUNCT__\tStand for ";
  local StrSummary="This __FUNCT__" ; 
  local StrSynopsis="Soon to Document this __FUNCT__";
  local StrDescription="This section contain Detailed information for __FUNCT__" ;
  
  
  if [ "${Arg0:=--startservices}" == "--help"	] ; then 
   GVRIsName=False GVRIsSynopsis=False GVRIsSummary=False GVRIsDesc=False GetVarReference ${__call_locality[1]} ; 
   echo -ne "${StrSwitchMessages}" > /dev/stderr ; 
  elif [ "${Arg0:=--startservices}" == "--get" ] ; then 
   eval """local ArgGet=\${${ArrayArg[1]}}""" ; 
   echo -ne """${ArgGet}\n""" ;
  elif [ "${Arg0:=--startservices}" == "--list" ] ; then 
   eval $( __GetVarReferenceList ) ;	
  elif [ "${Arg0:=--startservices}" == "--startservices" ] ; then 
   return eval $( VTVIsArrayStyleInsert=True \
        VTVValueEntry=${StrVarList}   \
        VTVIsValueReAssign=True       \
        VTVIsValueToConvert=False     \
        VTVIsArrayStyleInsert=True    \
        ValueToVariable ) ${StrStartMain}
  fi

}

### End of if-versionGCT == 0.0.2
fi

### End if of SubGitCommitTransaction
fi 

if [ "${GitHubCommitAlpha:=False}" == "True" ] ; then 

 #unset GetSelectedFile ;
 function GetSelectedFile()    
 { 
  local __call_locality=( GSF GetSelectedFile )
  unset ArrayArg Arg0 IntWidth IntHeight StrTitle StrZenityMainAction StrSep StrZenFSMFile; 
  local ArrayArg=( $* ) ;
  local Arg0=${ArrayArg[0]} ; 
  local IntWidth=${GSFZenityWidth:=640} ; 
  local IntHeight=${GSFZenityHeight:=200} ; 
  local StrTitle=${GSFZenityTitle:=GetSelectedFile, Zenity File-Shell Selection} ; 
  local StrZenityMainAction=${GSFZenityMainAction:=--file-selection} ;
  local StrSep=${GSFZenitySep:=,}
  local StrZenFSMFile=${GSFZenitySetMultiple:=True} ; 
  
  function __main_StartServices()
  {
   local __call_locality=( Main __main_StartServices ) ;
   local Arg0=${ArrayArg[0]} ;
   local ArrayArg=( $* ) ; 
   local ArrayReturnedFile=( ) ; 
   ###->local StrFileToCommit=${GitHubCommitFilePath:=/home/maxiste/github/Technical-PorteFolio/Python}
   ### Saving Current Path
   
   ### See BoolVarTestVarCreation from fnct_debian_lib .
   ### This replacement is intended to supply a Boolean test and Value Association, done in one line, 
   ### it allow to generate a range of variable being Transited from Prefixed-Var and value
   ### passed in a query, which is sometimes had no value and give extra code that might trigger error. 
   ### local StrMultipleFileSelectionAttr="--multiple"
   ### if [ "${StrZenityFSMultipleFile}" == "False" ] ; then 
   ###  StrMultipleFileSelectionAttr="" ; 
   ### fi 

   eval $( BVTestVarName=StrMFileAttr \
           BVTestVarHold="--multiple" \
           BVTestBoolVarName="${StrZenFSMFile}" \
           BoolVarTestVarCreation ) ; 
   
   local StrCurrentPath=$( pwd ) ; 
   cd ${GSFPath} ; 
   local Cmd="zenity --title=\"${StrTitle}\" \
                     --width=${IntWidth} \
                     --height=${GSFZenityHeight} \
                     ${StrZenityMainAction} \
                     ${StrMFileAttr} \
                     --filename=\"${StrFileToCommit}\" \
                     --separator='${StrSep}'" ; 
   local FileSelection=$( ${Cmd} ) ;

   cd ${StrCurrentPath} ; 
   local ArrayReturnedFile=( ) ;
   local FileCommit=( $( echo ${FileSelection//,/ } ) ) ; 
   
   for (( intx=0 ; intx <= ${#FileCommit[@]} ; intx++ )) ; do 
    local FileName=( ${FileCommit[${intx}]//\// } ) ;
    ArrayReturnedFile[${#ArrayReturnedFile[@]}]="${FileName[ $(( ${#FileName[@]} - 1 ))]}" ;
   done 
   #local FileCommited=${FileCommit[$(( ${#FileCommit[@]}-1 ))]} ; 
   echo "${ArrayReturnedFile[@]// /,}" ; 
  }
  
  local StrSwitchMessages="${StrSwitchesShow}${StrStartSwitches}\n${StrGetMsgSwitches}\n${StrListMsgSwitches}\n" ;
  
  if [ "${Arg0:=--startservices}" == "--help" ] ; then 
     GetVarReference ${__call_locality[1]} ; 
     echo -ne "${StrSwitchMessages}" > /dev/stderr ; 
  elif [ "${Arg0:=--startservices}" == "--get" ] ; then 
   eval """local ArgGet=\${${ArrayArg[1]}}""" ;  
   echo -ne """${ArgGet}\n""" ; 
   ### Test Ok, passed Sat Sep 28 21:18:23 EDT 2013 
  elif [ "${Arg0:=--startservices}" == "--list" ] ; then 
   eval $( __GetVarReferenceList ) ; 
   ### Test Ok, passed, Sat Sep 28 21:17:45 EDT 2013
  elif [ "${Arg0:=--startservices}" == "--startservices" ] ; then
   IntWidth="${IntWidth}"                               \
   IntHeight="${IntHeight}"                             \
   StrTitle="${StrTitle}"                               \
   StrZenityMainAction="${StrZenityMainAction}"         \
   StrSep="${StrSep}"                                   \
   StrZenityFSMultipleFile="${StrZenityFSMultipleFile}" \
   __main_StartServices ; 
  fi 

 } 
  
 function GitHubCommit()
 { 
  local ArrayArg=( $* ) ; 
  local __call_locality=( GitHC GitHubCommit    )
  local StrCommitAction=${GitHCActionPush:=push} ;
  local StrBranchLocation=${GitHCCommitBrLocation:=origin}; 
  local StrBranchName=${GitHCBranch:=master} ;
  local StrFileToCommit=${GitHCFilePath:=/home/maxiste/github/Technical-PorteFolio/Python} ;
  local StrMessageCommit=${GitHCMessageCommiting:=Git Commit message} ;
  local BoolUseZenityFileSelect=${GitHCZenityFileShell:=False} ; 
  local Arg0=${ArrayArg[0]} ; 
  #local StrSwitchMessages="Following switch are available:\n\n\t--startservices\tStart the application normally.\n\t--get\t\tReturn value of Internal Variable.\n\t--list\t\tList all Internal Pre-fixed Variable available to query or get.\n" ;
  local StrSwitchMessages="${StrSwitchesShow}${StrStartSwitches}\n${StrGetMsgSwitches}\n${StrListMsgSwitches}\n${StrCompWordMsgSwitches}\n" ;
  local StrZenityTitle=${GitHCFileShellTitle:="GitHubCommit File Selection"} ; 
  
  function GitCommitPushAction()
  {
   local __call_locality=( GitCPAction GitCommitPushAction ); 
   local ArrayArg=( $* ) ; 
   if [ ${GitCPActionLength:=0 :=0} -gt 5 ] ; then 
    git commit -m "${GitCPActionCommitMessage}" ${GitCPActionFile} ; 
    git ${GitCPActionIs:=push} ${GitCPActionPoint:=origin} ${GitCPActionBranch:=master} ;
   else
    echo -ne "File ${GitCPActionFile} not committed, Cancel was pressed.\n" > /dev/stderr ;  
   fi
   
  }
  

  function GitCommit( )
  {
   echo -ne "Function:GitCommit\n" > /dev/stderr ; 
   local ArrayArg=( $* ) ;
   local __call_locality=( GitC GitCommit ); 
   local ArrayFileCommit=( ${GitCommitFileList/,/ } ) ;
   local StrGitCommitPAT="" ;
   for (( intx=0 ; intx <= $(( ${#ArrayFileCommit[@]}-1 )) ; intx++ )) ; do 
    local StrFile="${ArrayFileCommit[${intx}]}" ;
    local CommitMessage=$( zenity \
                           --title="GitHub, commiting file ${StrFile}" \
                           --width=640 \
                           --height=200 \
                           --ok-label="commit" \
                           --text-info \
                           --editable \
                           --text="${StrMessageCommit}" ) ; 
    local ErrorCommit=$? ;
    local IntLenMessage=${#CommitMessage} ;
    GitCPActionIs=${GitCommitAction}            \
    GitCPActionPoint=${GitCommitBranchLocation} \
    GitCPActionBranch=${GitCommitBranchName}    \
    GitCPActionLength=${IntLenMessage}          \
    GitCPActionCommitMessage=${CommitMessage}   \
    GitCPActionFile=${StrFile}                  \
    GitCommitPushAction ;
   done 
  }
  
  ### #############################################
  ### Main Body 
  ### ############################################# 
  
  #local StrGFSPrefixT="StrFileToCommit=${StrFileToCommit} \
                      #GSFZenityTitle=${StrZenityTitle} \
                      #GSFPath=${StrFileToCommit} " ; 
  #local StrGitCommitFileShellT="GitCommitBranchLocation=${StrBranchLocation} \
                               #GitCommitBranchName=${StrBranchName}         \
                               #GitCommitAction=${StrCommitAction}           \
                               #GitCommitFileList="${StrFileCommit}"         \
                               #StrMessageCommit=${StrMessageCommit} "
  if [ "${Arg0:=--startservices}" == "--help" ] ; then 
     GetVarReference ${__call_locality[1]} ; 
     echo -ne "${StrSwitchMessages}" > /dev/stderr ; 
  elif [ "${Arg0:=--startservices}" == "--get" ] ; then 
   eval """local ArgGet=\${${ArrayArg[1]}}""" ;  
   echo -ne """${ArgGet}\n""" ; 
  elif [ "${Arg0:=--startservices}" == "--list" ] ; then 
   #eval ${__call_locality[1]} --help 2> /dev/null | egrep -i "^Variable" | cut -d ' ' -f 2 | tr '[:cntrl:]' ' '
   eval $( __GetVarReferenceList ) ; 
  elif [ "${Arg0:=--startservices}" == "--startservices" ] ; then
   if [ "${BoolUseZenityFileSelect:=False}" == "True" ] ; then 
     local StrFileCommit=$( echo ${StrGFSPrefixT} GetSelectedFile ) ; 
     $( ${StrGitCommitFileShellT} GitCommit  ) ; 
   else
     #test ! -e ${ArrayArg[0]} && echo -ne "\nFile ${ArrayArg[0]} can not be commited, does not exist.\n" > /dev/stderr ;
     if [ "${Arg0}" != "" ] ; then 
      GitCommitBranchLocation=${StrBranchLocation} \
      GitCommitBranchName=${StrBranchName}         \
      GitCommitAction=${StrCommitAction}           \
      GitCommitFileList="${ArrayArg[0]}"           \
      StrMessageCommit=${StrMessageCommit} GitCommit  ; 
     else
      local StrFileList=${ArrayArg[@]// /,}
      GitCommitBranchLocation=${StrBranchLocation} \
      GitCommitBranchName=${StrBranchName}         \
      GitCommitAction=${StrCommitAction}           \
      GitCommitFileList="${StrFileList}"           \
      StrMessageCommit=${StrMessageCommit} GitCommit  ; 
     fi
   fi
  fi
 }

 function GitAutoCommit ()    
 { 
  local ArrayArg=( $* ) ; 
  local Arg0=${ArrayArg[0]} ;
  
  while [ 1 ] ; do 
   GitHubCommitFilePath=${TodayGitHub[${TodayIndex:=${Arg0}}]} GitHubCommit ${TodayGitFile[${TodayIndex:=${Arg0}}]]}  ; 
  done 
 } 


### End if of GitHubCommitAlpha
fi 



if [ ${VarOldsubGit:=False} == "True" ] ; then

  function __GitBranch( )
  {
   eval $( __call_localityLocalName=BrOpt __call_locality ) ;
   eval $( FParamFuncName=${StrFuncName} FParamSuffixName=Action FParamVarName=StrActionBranch FParamDefaultValue=change     __fnctCreateLocalityFuncParam ); 
   eval $( FParamFuncName=${StrFuncName} FParamSuffixName=Name FParamVarName=StrBranchName FParamDefaultValue=master     __fnctCreateLocalityFuncParam ); 

    function CaseBranchingGit()
    {
      function __GitCheckOut()
      {
        local CmdEval=( git checkout -f ${StrBranchName} ); 
        echo -ne "CmdLine:[ ${CmdEval[@]} ]\n" ;
        eval "${CmdEval[@]}";
      }
      function __GitCreateBranch()
      {
        local CmdEval=( git branch -l ${StrBranchName} --color );
        echo -ne "CmdLine:[ ${CmdEval[@]} ]\n" ;
        ###
        ### The '''eval "${CmdEval[@]}" ;''' Tend to be a good __finalize, or __closure...
        eval "${CmdEval[@]}" ;
      }
      eval $( __call_localityLocalName=CBGit __call_locality ) ;
      function __BinaryCase()
      {
        case "${StrActionBranch}" in 
          "change" )
          __GitCheckOut
          ;;
          "create" )
          __GitCreateBranch
          ;;
        esac
      }
      __BinaryCase ;
    }
    CaseBranchingGit;
  }

  function GitBranchList()
  {
    eval $( __call_localityLocalName=GBL __call_locality ) ;
    eval $( FParamFuncName=${StrFuncName} FParamSuffixName=ArrayName    FParamVarName=StrArrayName    FParamDefaultValue=ArrayGitBranch     __fnctCreateLocalityFuncParam );
    eval $( FParamFuncName=${StrFuncName} FParamSuffixName=VariableMode FParamVarName=StrVariableMode FParamDefaultValue=local              __fnctCreateLocalityFuncParam );
    eval $( FParamFuncName=${StrFuncName} FParamSuffixName=Action       FParamVarName=StrAction       FParamDefaultValue=ArrayCreation      __fnctCreateLocalityFuncParam );
   
    GitBranchList.Property.N() 
    {
     eval $( __call_localityLocalName=${StrFuncName}.Property.N __call_localityDisplayFunctionEntry=1 __call_locality );
     #local IntID=(${StrFuncName/./ });
     #IntID=${IntID[${#IntID[@]}]};
     local IntArrayArg=${#ArrayArg[@]} ;
     local ArrayFuncProperty=( ${StrFuncName/Property/Getter} ${StrFuncName/Property/Setter} ) ;
     if [ ${IntArrayArg:=0} -gt 0 ] ; then 
      eval "${ArrayFuncProperty[1]/\.N/\.${IntPos}} ${ArrayArg[@]}" ;
     else
      eval "${ArrayFuncProperty[0]/\.N/\.${IntPos}} ${ArrayArg[@]}" ;
     fi 
    }
    
    GitBranchList.Getter.N() 
    { 
        eval $( __call_localityLocalName=${StrFuncName}.Getter.N __call_localityDisplayFunctionEntry=1 __call_locality );
        local IntID=(${StrFuncName/./ });
        IntID=${IntID[${#IntID[@]}]};
        echo "${__META__[${IntID}]}"
    }
    
    GitBranchList.Setter.N() 
    { 
        eval $( __call_localityLocalName=${StrFuncName}.Setter.N __call_localityDisplayFunctionEntry=1 __call_locality );
        local IntID=(${StrFuncName/./ });
        IntID=${IntID[${#IntID[@]}]};
        echo "__META__[${IntID}]=${ArrayArg[@]}" ;
    }
    
    function ActionArrayProperty()
    {
      eval $( __call_localityLocalName=Property __call_localityDisplayFunctionEntry=1 __call_locality ) ;
      echo -ne "\nFunc: ${StrFuncName}, NameArrayID : ${ArrayArg[0]}\n" ;
      eval """$( declare -f GitBranchList.Property.N | sed 's/__META__/${ArrayName}/g;s/\.N/\.${IntPos}/g;s/\.${StrFuncName}//g')""" ;
    }
    
    function ActionArrayGetter()
    {
      eval $( __call_localityLocalName=Getter __call_localityDisplayFunctionEntry=1 __call_locality ) ;
      eval """$( declare -f GitBranchList.Getter.N | sed 's/__META__/${ArrayName}/g;s/\.N/\.${IntPos}/g;s/\.${StrFuncName}//g')""" ;
    }

    function ActionArraySetter()
    {
      eval $( __call_localityLocalName=Setter __call_localityDisplayFunctionEntry=1 __call_locality ) ;
      eval """$( declare -f GitBranchList.Setter.N | sed 's/__META__/${ArrayName}/g;s/\.N/\.${IntPos}/g;s/\.${StrFuncName}//g')""" ;
    }
    
    function VarDeclHandler()
    {
      eval $( __call_localityLocalName=VDecl __call_localityDisplayFunctionEntry=1 __call_locality ) ;
      eval $( FParamFuncName=${StrFuncName} FParamSuffixName=CreateVar    FParamVarName=StrCreateVar    FParamDefaultValue=StrDeclVar     __fnctCreateLocalityFuncParam );
      function __Case0()
      {
        echo -ne "${StrCreateVar}=\"local \";\n" ;
      }
      function __Case1()
      {
        echo -ne "${StrCreateVar}=\"declare -a \";\n" ;
      }
        
      function __BinaryCase()
      {
        echo -ne "Creating Array : ${StrArrayName }\n" > /dev/stderr ; 
        case "${StrVariableMode}" in 
          "local" )
          __Case0
          ;;
          "global" )
          __Case1 
          ;;
        esac
      }
      __BinaryCase ;
    }

    function AwkFilter()
    {
      eval $( __call_localityLocalName=AwkFilter __call_locality ) ;
      awk -f ${ArrayAwkScriptPath[0]}/GitBranchList.awk
    }

    function GitCmd()
    {
      eval $( __call_localityLocalName=GCmd __call_locality ) ;
      eval $( FParamFuncName=${StrFuncName} FParamSuffixName=GitCommand0 FParamVarName=ArrayGitCommand[0] FParamDefaultValue=branch   __fnctCreateLocalityFuncParam );
      eval $( FParamFuncName=${StrFuncName} FParamSuffixName=GitCommand1 FParamVarName=ArrayGitCommand[1] FParamDefaultValue=-l       __fnctCreateLocalityFuncParam );
      eval "git ${ArrayGitCommand[@]}" ; 
    }
      
    function ActionArrayCreation()
    {
      eval $( __call_localityLocalName=ActionArrayCreation __call_localityDisplayFunctionEntry=1 __call_locality ) ;
      GitBranch=$( ( GitCmd | AwkFilter ) );
      StrDeclVar="";
      eval $( VDeclCreateVar=StrDeclVar VarDeclHandler ) ;
      echo -ne "${StrDeclVar}${StrArrayName}=( ${GitBranch} )" ;
    }
    
    function ActionArrayPropertyLoader()
    {
      eval $( __call_localityLocalName=ActionArrayPropertyLoader __call_localityDisplayFunctionEntry=1 __call_locality ) ;
      ActionArrayProperty ${ArrayArg[0]} ;
      ActionArrayGetter ${ArrayArg[0]} ;
      ActionArraySetter ${ArrayArg[0]} ;
    }
    
    case ${StrAction} in
     "ArrayCreation" )
     ActionArrayCreation ;
     ;;
     "Property" )
     eval $( __in_for ${StrArrayName} ActionArrayPropertyLoader ) ;
     ;;
    esac 
  }


  function git_add_reflection()
  {
    eval $( __call_localityLocalName=GitMeth __call_localityDisplayFunctionEntry=1 __call_locality ) ;
    eval $( FParamFuncName=${StrFuncName} FParamSuffixName=Dcommand FParamVarName=StrDcommand FParamDefaultValue=AddRepository __fnctCreateLocalityFuncParam     ) ;
    eval $( FParamFuncName=${StrFuncName} FParamSuffixName=CommitMessage FParamVarName=StrCommitMessage FParamDefaultValue=StrMsgGitCommit FParamInterpretVar=True __fnctCreateLocalityFuncParam     ) ;
    eval $( FParamFuncName=${StrFuncName} FParamSuffixName=GitRepository FParamVarName=StrGitRepository FParamDefaultValue=Montreal-Olympic-Statium-kml-python.git  __fnctCreateLocalityFuncParam     ) ;
    local CmdEval=() ;
    
    function RemoveDbVarLog()
    {
     if [ -e db_parse_newvar ] ; then 
      rm -f db_parse_newvar ;
     fi
    }
    
    function DisplayEvalCmd()
    {
      eval $( __call_localityLocalName=DisplayEvalCmd __call_localityDisplayFunctionEntry=1 __call_locality ) ;
      echo -ne "\n\t\tCommand Eval:[ ${CmdEval[${intCmdEval}]} ]\n" ;
      RemoveDbVarLog ;
      eval "${CmdEval[${intCmdEval}]}" ;
    }
    
    function SingleAdd()
    {
     eval $( __call_localityLocalName=SingleAdd __call_localityDisplayFunctionEntry=0 __call_locality ) ;
     CmdEval[0]="git add ${ArrayArg[0]} "  ;
     eval $( __in_for CmdEval DisplayEvalCmd  );
    }
    
    function SinglePushOrigin()
    {
     eval $( __call_localityLocalName=SingleAdd __call_localityDisplayFunctionEntry=0 __call_locality ) ;
     
     eval """CmdEval[0]=\"git push origin master \" """  ;
     eval $( __in_for CmdEval DisplayEvalCmd  );
    }

    function SingleAddOrigin()
    {
     eval $( __call_localityLocalName=SingleAdd __call_localityDisplayFunctionEntry=0 __call_locality ) ;
     
     eval """CmdEval[0]=\"git remote add origin git@github.com:priendeau/${StrGitRepository} \" """  ;
     eval $( __in_for CmdEval DisplayEvalCmd  );
    }
    
    function SingleCommit()
    {
     eval $( __call_localityLocalName=SingleAdd __call_localityDisplayFunctionEntry=0 __call_locality ) ;
     eval """CmdEval[0]=\"git commit -m '\${${StrCommitMessage}}' \" """  ;
     eval $( __in_for CmdEval DisplayEvalCmd  );
    }
    
    function AddRepository()
    {
     eval $( __call_localityLocalName=AddRepository __call_localityDisplayFunctionEntry=0 __call_locality ) ;
     CmdEval[0]="git add ${ArrayArg[0]} "  ;
     eval """CmdEval[1]=\"git commit -m '\${${StrCommitMessage}}' \" """  ;
     CmdEval[2]="git remote add origin git@github.com:priendeau/${ArrayArg[0]}"  ;
     CmdEval[3]="git push origin master" ;
     
     eval $( __in_for CmdEval DisplayEvalCmd  );
    
    }
    echo -ne "Command Git :[ ${StrDcommand} ]\n" ;
    eval ${StrDcommand} ${ArrayArg[@]} ;
  }

  function GitAddFile()    
  {  
   eval $( __call_localityLocalName=GitAdd __call_localityDisplayFunctionEntry=1 __call_locality  ) ; 
   eval $( FParamFuncName=${StrFuncName} FParamSuffixName=FileName FParamVarName=StrFileName FParamDefaultValue=None __fnctCreateLocalityFuncParam     ) ;
   
   function SubEval()
   {
     eval $( __call_localityLocalName=GitSE __call_localityDisplayFunctionEntry=1 __call_locality  ) ; 
     if [ "${StrFileName}" == "None" ] ; then 
      echo "No file-name to add to Git Repository: File=${StrFileName}\n" ;
     else
      local CmdEval=( git add ${StrFileName} );
      echo -ne "CmdLine:[ ${CmdEval[@]} ]\n" > /dev/stderr ;
      eval "${CmdEval[@]}" ;
     fi
   }
   StrFileName=${ArrayArg[0]} SubEval ;
  } ; 

  function start_git_add_file()
  {
   eval $( __call_localityLocalName=SGaf __call_localityDisplayFunctionEntry=1 __call_locality  ) ; 
   eval $( FParamFuncName=${StrFuncName} FParamSuffixName=Email FParamVarName=StrEmail FParamDefaultValue=priendeau@live.ca __fnctCreateLocalityFuncParam     ) ;
   eval $( FParamFuncName=${StrFuncName} FParamSuffixName=UserName FParamVarName=StrUserName FParamDefaultValue=Maxiste%20Deams __fnctCreateLocalityFuncParam     ) ;
   
   ### Implement better algo, see http://bit.ly/diVIHI for example of conversion:
   ### 
   ### add remote repo : git remote add origin ssh://maxistedeams@disampleforblog.git.sourceforge.net/gitroot/disampleforblog/disampleforblog.git
   StringUnUrlUserName=${StrUserName/\%[0-9][0-9]/ };
   StringUnUrlUserEmail=${StrUserName/\%[0-9][0-9]/ };
   
   if [ ! -d .git ] ; then 
    git config --global user.name  "${StringUnUrlUserName}" ;
    git config --global user.email "${StringUnUrlUserEmail}" ;
    git init ;
   fi
   eval $( GBLVariableMode=local GitBranchList )
   eval $( GitCreateLocalQueue ) ;
   eval $( __in_for ArrayGitQueue GitAddFile ) ;
   git commit -m "updated:UUID:$( uuidgen -r )" -a ; 
  }


  function GitCommitMsg()    
  {  
   eval $( __call_localityLocalName=Add __call_localityDisplayFunctionEntry=1 __call_locality  ) ; 
   eval $( FParamFuncName=${StrFuncName} FParamSuffixName=TagMsg FParamVarName=StrTagMsg FParamDefaultValue=pocdedu __fnctCreateLocalityFuncParam     ) ;
   local StrMsg="v.$( uuidgen -r )${StrTagMsg}/${RANDOM}" ; 
   echo -ne "\nCommit Section Name:[ ${StrMsg} ]\n" ; 
   git commit -m "${StrMsg}" ;

  }


  function CleanDbParseNewVar()
  {
    eval $( __call_localityLocalName=CLDPNV __call_localityDisplayFunctionEntry=1 __call_locality  ) ; 
    echo -ne """if [ -e db_parse_newvar ] ; then rm -f db_parse_newvar ; fi ; """ ;
  }


  function GitCreateLocalQueue()
  {
   eval $( __call_localityLocalName=GCLQ __call_localityDisplayFunctionEntry=1 __call_locality  ) ; 
   eval $( FParamFuncName=${StrFuncName} FParamSuffixName=ArrayName FParamVarName=StrArrayName FParamDefaultValue=ArrayGitQueue __fnctCreateLocalityFuncParam     ) ;
   eval $( FParamFuncName=${StrFuncName} FParamSuffixName=DefaultPath FParamVarName=StrDefaultPath FParamDefaultValue=./ __fnctCreateLocalityFuncParam     ) ;
   
   function EgrepFilter()
   {
     eval $( __call_localityLocalName=EgrepFilter __call_localityDisplayFunctionEntry=0 __call_locality  ) ; 
     egrep -iv ".passogva|.commit-msg|git-password|README.encode|.git|.decode|.encode|.gitfs|.avfs-git|.avfs_git|.passwd|.password|.htpasswd|.htconf|db_parse_newvar" ;
     
   }
   
   function TrailRemove()
   {
    eval $( __call_localityLocalName=EgrepFilter __call_localityDisplayFunctionEntry=0 __call_locality  ) ; 
    tr '[:cntrl:]' ' ' ;
   }
   
   function LocalFind()
   {
     eval $( __call_localityLocalName=LocalFind __call_localityDisplayFunctionEntry=1 __call_locality  ) ; 
     find ${StrDefaultPath} -type f | sed 's/\.\///g'| EgrepFilter  | TrailRemove ;
   }
   eval $( CleanDbParseNewVar );
   local CmdEval=( "declare -a ${StrArrayName}=( $( LocalFind ) )" ) ; 
   echo -ne "CmdLine : CmdEval length: ${#CmdEval} bytes\n" > /dev/stderr ;
   eval "echo \"${CmdEval[@]}\"" ;
   echo -ne "Array with Git Local File are stored inside Array:[ ${StrArrayName} ]\n" > /dev/stderr ;
  }

  function GitCmdFileArray()    
  {  
   eval $( __call_localityLocalName=Git __call_localityDisplayFunctionEntry=1 __call_locality  ) ; 
   eval $( FParamFuncName=${StrFuncName} FParamSuffixName=ArrayName FParamVarName=StrArrayName FParamDefaultValue=ArrayArg __fnctCreateLocalityFuncParam     ) ;
   eval $( FParamFuncName=${StrFuncName} FParamSuffixName=Cmd FParamVarName=StrCmd FParamDefaultValue=add __fnctCreateLocalityFuncParam     ) ;
   eval "eval $( __in_for ${StrArrayName} \"${StrCmd}\" )" ;

  }

  function GitAddFileArray()    
  {  
   eval $( __call_localityLocalName=GitAddFileArray __call_localityDisplayFunctionEntry=1 __call_locality  ) ; 
   eval $( FParamFuncName=${StrFuncName} FParamSuffixName=ArrayName FParamVarName=StrArrayName FParamDefaultValue=ArrayArg __fnctCreateLocalityFuncParam     ) ;
   eval $( CleanDbParseNewVar );
   eval "eval $( __in_for ${StrArrayName} GitAddFile )" ;
   
  }

  #declare -a ArrayFileRm=( WebServiceStudio.pidb WebServiceStudio.mdp WebServiceStudio.mds WebServiceStudio.mdp WebServiceStudio.userprefs ComponentSysWinFormTranslation.cs WebServiceStudio.exe.encode WebServiceStudio.exe.mdb.encode ) ; 

  function find_git_rm()    
  { 
    eval $( __call_localityLocalName=FGRM __call_locality ) ; 
    eval $( FParamFuncName=${StrFuncName} FParamSuffixName=ArrayName FParamVarName=StrArrayName FParamDefaultValue=ArrayFileRm __fnctCreateLocalityFuncParam     ) ;
    eval "find ./ -type f -iname \"\${${StrArrayName}[\${int${StrArrayName}}]}\" -exec git rm {} \; ;" 
  } 

  function start_find_rm()
  {
    eval $( __call_localityLocalName=SFR __call_locality ) ; 
    eval $( FParamFuncName=${StrFuncName} FParamSuffixName=ArrayName FParamVarName=StrArrayName FParamDefaultValue=ArrayFileRm __fnctCreateLocalityFuncParam     ) ;
    FGRMArrayName=${StrArrayName} eval $( __in_for ArrayFileRm find_git_rm ) ;
  }

  function GetPassogva( )
  {
    eval $( __call_localityLocalName=GetPassogva __call_locality ); 
    eval $( FParamFuncName=${StrFuncName} FParamSuffixName=MinLen FParamVarName=IntMinLen FParamDefaultValue=10 __fnctCreateLocalityFuncParam     ) ;
    eval $( FParamFuncName=${StrFuncName} FParamSuffixName=MaxLen FParamVarName=IntMaxLen FParamDefaultValue=20 __fnctCreateLocalityFuncParam     ) ;
    /etc/init.d/fnct.d/GetPassogva.py
    
  }


  function encode_git_add()
  { 
   eval $( __call_localityLocalName=gitadd __call_locality ); 
   eval $( FParamFuncName=${StrFuncName} FParamSuffixName=PasswdFile FParamVarName=StrPasswdFile FParamDefaultValue=/home/ubuntu/git/priendeau/.passwd __fnctCreateLocalityFuncParam     ) ;
   eval $( FParamFuncName=${StrFuncName} FParamSuffixName=DefaultGitHeadFile FParamVarName=StrDefaultGitHeadFile FParamDefaultValue=.git/logs/HEAD __fnctCreateLocalityFuncParam     ) ;
   
   local FileNameGit="${ArrayGitQueue[${intArrayGitQueue}]}" ; 
   local StrRealFileName=${FileNameGit} ;
   local PASSOGVA
   GetPassogva ;
   local UUID=$( uuidgen -r );
   local ShaValue=( $( sha1sum --binary ${StrRealFileName} ) );
   local NewMsg=${StrMsgCommit/__FILENAME__/${StrRealFileName}}; 
   NewMsg=${NewMsg/__SHA__/${ShaValue[0]}}; 
   NewMsg=${NewMsg/__UUID__/${UUID}} ;
   NewMsg=${NewMsg/__PASSOGVA__/${PASSOGVA}} ;
   local IsEncoded=False ;
   
   
   if [ -e ${StrPasswdFile} ] ; then
    IsEncoded=True ;
    local CmdEval=( openssl enc -e -base64 -cast5-cbc -kfile ${StrPasswdFile} -in ${StrRealFileName} -out ${FileNameGit}.encode ) ;
    echo -ne "CmdEval: ${CmdEval[@]}\n" ;
    eval "${CmdEval[@]}" ;
    FileNameGit="${FileNameGit}.encode" ;
    NewMsg=${NewMsg/__ENCODING__/BASE64:CAST5-CBC} ;
    if [ -e ${StrRealFileName} ]; then 
     if [ -e ${FileNameGit} ] ; then 
      git rm ${StrRealFileName} ; 
     fi
    fi

   else
    IsEncoded=False ;
    NewMsg=${NewMsg/__ENCODING__/NONE} ;
   fi 

   local IntAddFound=$( egrep -ic --no-filename "${FileNameGit}" ${StrDefaultGitHeadFile} ) ;
   if [ ${IntAddFound:=0} -eq 0 ] ; then 
    
    if [ "${IsEncoded:=False}" == "True" ] ; then 
      local IsEncodedProduct=$( echo "${FileNameGit}" | egrep -ic --no-filename "\.encode"  ) ;
      if [ ${IsEncodedProduct:=0} -gt 0 ] ; then 
       git add "${FileNameGit}" ; 
      fi
    else
     git add "${StrRealFileName}" ; 
    fi 
    
   fi
   git commit -m "${NewMsg}" ${FileNameGit} ; 

  } ; 




 function GitDailyWorkUpdate()
 {
  eval $( __call_localityLocalName=GDWU __call_locality ); 
  eval $( FParamFuncName=${StrFuncName} FParamSuffixName=AddNewFileHolder FParamVarName=StrAddNewFileHolder FParamDefaultValue=.file-add __fnctCreateLocalityFuncParam     ) ;
  eval $( FParamFuncName=${StrFuncName} FParamSuffixName=BranchName FParamVarName=StrBranchName FParamDefaultValue=master __fnctCreateLocalityFuncParam     ) ;
  
  eval $( FParamFuncName=${StrFuncName} FParamSuffixName=MimeTypeCleanUp FParamVarName=StrMimeTypeCleanUp FParamDefaultValue=pyc __fnctCreateLocalityFuncParam     ) ;
  
  eval $( FParamFuncName=${StrFuncName} FParamSuffixName=Interpreter FParamVarName=StrInterpreter FParamDefaultValue=python __fnctCreateLocalityFuncParam     ) ;
  eval $( FParamFuncName=${StrFuncName} FParamSuffixName=VersionName FParamVarName=StrVersionName FParamDefaultValue=2.6 __fnctCreateLocalityFuncParam     ) ;
  eval $( FParamFuncName=${StrFuncName} FParamSuffixName=SetupInstallName FParamVarName=StrSetupInstallName FParamDefaultValue=setup.py __fnctCreateLocalityFuncParam     ) ;
  eval $( FParamFuncName=${StrFuncName} FParamSuffixName=SetupInstallOption FParamVarName=StrSetupInstallOption FParamDefaultValue=clean,build,bdist,bdist_dumb,sdist,upload __fnctCreateLocalityFuncParam     ) ;

  function ShowRegisteredStep()
  {
   eval $( __call_localityLocalName=ShowRS __call_locality ); 
   echo -ne "\n\tAdding ${ArrayOption[${intArrayOption}]} has step to process.\n" ; 
  }
  
  local ArrayOption=( ${StrSetupInstallOption//,/ } ) ;
  
  eval $( __in_for ArrayOption ShowRegisteredStep ) ;
  
  function __fnct_git_add()
  {
   eval $( __call_localityLocalName=MGAF __call_locality ); 
   local StrFileName=${ArrayFileAdd[${intArrayFileAdd}]} ;
   local StrUUID=$( uuidgen -r );
   local Sha1Sum=( $( sha1sum -b ${StrFileName} ) );
   Sha1Sum=${Sha1Sum[0]} ;
   git add ${StrFileName} ;
   git commit -m "Adding new file: ${StrFileName}, UUID:${StrUUID}, SHA1SUM: ${Sha1Sum}" ${StrFileName} ;
   
  }
  
  function main_git_add_file()    
  {
    eval $( __call_localityLocalName=MGAF __call_locality ); 
    if [ -e ${StrAddNewFileHolder} ] ; then
     local IntNbLine=( $( wc -l ${StrAddNewFileHolder} ) ) ;
     IntNbLine=${IntNbLine[0]} ;
     if [ ${IntNbLine:=0} -gt 0 ] ; then 
      local ArrayFileAdd=( $( cat ${StrAddNewFileHolder} ) ) ;
      eval $( __in_for ArrayFileAdd __fnct_git_add ) ;
      echo > ${StrAddNewFileHolder} ;
     fi
    else
     echo > ${StrAddNewFileHolder} ;
    fi
  }
  
  function main_git_commit_update()    
  { 
    eval $( __call_localityLocalName=MGCU __call_locality ); 
    
    local UUID=$( uuidgen -r ) ;
    find ./ -type f -iname "*.${StrMimeTypeCleanUp}" -exec rm -f {} \; 
    git commit -m "UUID:${UUID}" -a ; 
    git push origin ${StrBranchName} ; 
  } ; 
  
  function install_pymodule()    
  { 
    eval $( __call_localityLocalName=IPymodule __call_locality ); 
    function install_py()    
    { 
      eval $( __call_localityLocalName=IPy __call_locality ); 
      local CmdEval=( ${StrInterpreter}${StrVersionName} ${StrSetupInstallName} ${ArrayArg[0]} ) ;  
      local strcmd="${ArrayOption[${intArrayOption}]}"; 
      eval "${CmdEval[@]}" ;
      if [ "${strcmd}" == "sdist" ] ; then 
       echo -ne "\n\n\tCreating Source with tag : ${strcmd}\n\n" ; 
      fi ; 
    } ; 
    eval $( __in_for ArrayOption install_py ); 
  } ; 
  
   main_git_commit_update ; 
   install_pymodule 
 }


  Git_Branch_Handler()  
  { 
   eval $( __call_localityLocalName=GBH __call_localityDisplayFunctionEntry=1 __call_locality ) ; 
   eval $( FParamFuncName=${StrFuncName} FParamSuffixName=BranchName FParamVarName=StrBranchName FParamDefaultValue=master __fnctCreateLocalityFuncParam )  ; 
   
   local intSleep=0;
   local TestSleep=40 ; 
   local TotalTestTime=$(( ${TestSleep} + 10 )) ;
   local ArrayPushBranch=( git push origin ${StrBranchName} ) ;
   local ArrayDateFormatReport=( "date" "+\"%c, UnixTimeStamp:%s\"" ) ;
   
   function BranchLocking()
   {
    eval $( __call_localityLocalName=BL __call_localityDisplayFunctionEntry=1 __call_locality ) ; 
    BrOptAction=change BrOptName=${StrBranchName} __GitBranch   ; 
   }
   
   function RandomInstance()
   {
     eval $( __call_localityLocalName=RI __call_localityDisplayFunctionEntry=1 __call_locality ) ; 
     intSleep=$(( ${RANDOM} % 90 )) ;
     DecalSleep=$(( ${RANDOM} % 20 )) ;
   }
   
   function SetRandomTime()
   {
    eval $( __call_localityLocalName=GBHSRT __call_localityDisplayFunctionEntry=1 __call_locality ) ; 
    while [ ${intSleep} -lt ${TotalTestTime} ] ; do 
     RandomInstance ;
     TotalTestTime=$(( ${TestSleep} + ${DecalSleep:=10} )) ; 
    done ; 
   }
   
   function DisplayInfo()
   {
     eval $( __call_localityLocalName=DisplayInfo __call_localityDisplayFunctionEntry=1 __call_locality ) ; 
     echo -ne "\n\tSleeping for ${intSleep} seconds.\n\tTest was done with TimeTrigger=${TotalTestTime} ,Average +-${DecalSleep}\n" ; 
   }

   function ContentLoop()
   {
    eval $( __call_localityLocalName=CL __call_localityDisplayFunctionEntry=1 __call_locality ) ; 
   }
   
   function TimerSleep()
   {
    eval $( __call_localityLocalName=TS __call_localityDisplayFunctionEntry=1 __call_locality ) ; 
    sleep ${intSleep} ; 
   }
   
   function DateReport()
   {
    eval $( __call_localityLocalName=DateR __call_localityDisplayFunctionEntry=1 __call_locality ) ; 
    eval "${ArrayDateFormatReport[@]}" ;
   }
   
   function __fnct_uuidgen()
   {
     eval $( __call_localityLocalName=__fnct_UUID __call_localityDisplayFunctionEntry=1 __call_locality ) ; 
     StrUUID=$( uuidgen -r ) ;
   } 
   
   function UUIDGenerator()
   {
    eval $( __call_localityLocalName=UUID __call_localityDisplayFunctionEntry=1 __call_locality ) ; 
    local StrUUID=None ;

    git commit -m "updated:UUID( ${StrUUID} )" -a ; 
   }
   
   function git_push()
   {
    eval $( __call_localityLocalName=GitP __call_localityDisplayFunctionEntry=1 __call_locality ) ; 
    eval "${ArrayPushBranch[@]}" ; 
   } 
   
   function __fnct_while_ArrayProc()
   {
    echo """local ArrayFuncLoop=( ${ListFuncProcList//,/ } ); while [ 1 ] ; do eval \$( __in_for ArrayFuncLoop eval ) ; done""" ;
   }
   
   function __fnct_ArrayProc()
   {
    echo """local ArrayFuncLoop=( ${ListFuncProcList//,/ } ); eval \$( __in_for ArrayFuncLoop eval )""" ;
   } 
   
   function ContentLoop()
   {
    eval $( __call_localityLocalName=GBHCL __call_localityDisplayFunctionEntry=1 __call_locality ) ; 
    eval $( FParamFuncName=${StrFuncName} FParamSuffixName=FuncProcList FParamVarName=ListFuncProcList FParamDefaultValue=SetRandomTime,DisplayInfo,TimerSleep,DateReport,UUIDGenerator,git_push FParamTypeVar=Array __fnctCreateLocalityFuncParam )  ; 
    
    eval $( __fnct_while_ArrayProc ) ; 
    #local ArrayFuncLoop=( ${ListFuncProcList//,/ } );
    
    #while [ 1 ] ; do 
    # eval $( __in_for ArrayFuncLoop eval )
    #done
    
   }
   
   function MainLoop()
   {
    eval $( __call_localityLocalName=MainWhileLoop __call_localityDisplayFunctionEntry=1 __call_locality ) ; 
    eval $( FParamFuncName=${StrFuncName} FParamSuffixName=FuncLoop FParamVarName=ListFuncProcList FParamDefaultValue=ContentLoop __fnctCreateLocalityFuncParam )  ; 

    eval $( __fnct_while_ArrayProc ) ;  
    #local ArrayFuncLoop=( ${ListFuncProcList//,/ } );
    
    #while [ 1 ] ; do 
    # eval $( __in_for ArrayFuncLoop eval ) ; 
    #done
   }
   
   function LoopInit()
   {
    eval $( __call_localityLocalName=LoopInit __call_localityDisplayFunctionEntry=1 __call_locality ) ; 
    eval $( FParamFuncName=${StrFuncName} FParamSuffixName=LoopInit FParamVarName=ListFuncProcList FParamDefaultValue=BranchLocking,MainLoop __fnctCreateLocalityFuncParam )  ; 

    eval $( __fnct_ArrayProc ) ;
    #local ArrayFuncLoop=( ${ListFuncLoop//,/ } );
    #eval $( __in_for ArrayFuncLoop eval ) ; 
   }
   LoopInit ;
   

  }


### End if of VarOldsubGit
fi 

### Removed GitHub ,
if [ "${GitHubServicesMonoWeb:=True}" == "True" ] ; then 

 function encode_start_git_add()
 {
  local StrMsgCommit="__MSG__:__FILENAME__: SHA:__SHA__, UUID:__UUID__ ENCODING:__ENCODING__" ;
  if [ -e .passogva ]; then 
   rm -f .passogva 
  fi
  eval $( GitCreateLocalQueue ) ;
  eval $( __in_for ArrayGitQueue encode_git_add ) ;
  git remote add origin git@github.com:priendeau/MonoWebServicesStudio.git
  git push origin master ;
  
 }

### End if of GitHubServicesMonoWeb
fi 



