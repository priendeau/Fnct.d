#!/bin/bash

# . /etc/init.d/Fnct.d/fnct_debian_lib ; 
### note : 3937035a-dcff-11e5-98a2-001e4c8856d6 problems of GetOtherDate and md_cd 
### testing if fnct_debian_lib is loaded , Generally based on presence of GetVarReference, 
### working for a better algo . 

if [ "${FNCTDLIBPATH:=None}" == "None" ] ; then 
 echo "Adding FNCTDLIBPATH has Path for Fnct.D" ; 
 #declare -xr FNCTDLIBPATH="/etc/init.d/Fnct.D" ; 
 ArrayLib=( fnct_debian_lib ) ;
fi 

declare FnctFuncReq=$( declare -f GetVarReference | egrep -c GetVarReference ) ; 
if [ ${FnctFuncReq:=0} -eq 0 ] ; then 
 echo "Loading [. ${FNCTDLIBPATH}/fnct_debian_lib] "  ; 
  ### Depend from ArrayLib, putting only inside fnct_debian_lib like previously declared
  ### make only this one be loaded. 
  OldArrayLib=( ${ArrayLib[@]} ) ; 
  ArrayLib=( fnct_debian_lib ) ; . /etc/init.d/Fnct.D/fnct_lib 
  #${FNCTDLIBPATH}/fnct_debian_lib ;  
fi 

test -d ${FNCTDLIBPATH} && declare LoadedFnctLib=True ; 

if [ "${LoadedFnctLib:=False}" != "True" ] ; then 
 ArrayLib=( fnct_debian_lib ) ; . ${FNCTDLIBPATH}/fnct_lib ; 
fi

### Use of md_cd 
### This an example that use Lib /etc/init.d/Fnct.d/fnct_debian_lib
### - It merely use the GetOtherDate but more convenience is coming .
### Description :
### md_cd, is equivalent to mkdir , but using Lock mechanism. to ensure
### good readibility of the ${HOME}/.ArrayMdCd, a storage file to store
### date of creation for public purposes and showing both confirmation 
### by doing a sha1sum on all operation and suming new operation .
### The Lock Mechanism can allow same user in different shell or operation
### to call the md_cd and wait until it get the lock removed to add the 
### the directory. 
### Also, if the file NewPathModel.tar.bz2 is present inside the user path 
### 'and configurable method will come with uses of ValueParser' will allow
### to dump pre-configured file... as example, every path created need a 
### .gitignore to skip temporary file to be backuped up by using the 
### command git add ... 
### This will also report the operation and whenever or not the default profile
### was deployed. 
### Since the access time can be modified with command like touch keeping a 
### constant structure with prime operation in head to mesure creation affinity, 
### this application can potentially be used to configure easily home and specific
### repository having Django like pre-setuped command on need ....
### - Dealing with basic rules of constant creation, this tools can also own future
### execution plan to emphasis safety or regulation. 
### This shell-script can easily replace mkdir like alias mkdir='/etc/init.d/Fnct.d/md_cd'
### and will report to user with limited wrigth need to use sudo in change owner and 
### reporting problems with configuration . 
### The Lock-Mechanism is easy and can be migrated in future templating to change the command
### for something else. 
### Also the lock mechanism own a specification, it's variable to hold the lock 
### is a variable-var... mean, it's name is somewhat unique on any call and may be called 
### many time by the same user and will old n-time variable lock owning their own 
### value to receveive the OK to proceed in execution of some strict operation. 

test "${USER}" != "root" && declare StrBasePath=${HOME} && declare StrFileStoreInfo=${StrBasePath}/.ArrayMdCd && declare StrFileStoreLock=${StrBasePath}/.ArrayMdCd_Lock ;
test "${USER}" == "root" && declare StrBasePath=/root && declare StrFileStoreInfo=${StrBasePath}/.ArrayMdCd && declare StrFileStoreLock=${StrBasePath}/.ArrayMdCd_Lock ;

test ! -f ${StrFileStoreLock} && echo 0 > ${StrFileStoreLock} ; 
test "${USER}" != "root" && test -f ${StrFileStoreInfo} && chown ${USER}.${USER} ${StrFileStoreInfo} 2> /dev/null ; 
test $? -ne 0 && sudo chown ${USER}.${USER} ${StrFileStoreInfo} 2> /dev/null
test "${USER}" != "root" && test -f ${StrFileStoreLock} && chown ${USER}.${USER} ${StrFileStoreLock} 2> /dev/null ; 
test $? -ne 0 && sudo chown ${USER}.${USER} ${StrFileStoreLock} 2> /dev/null

echo "" > /dev/stderr 2> /dev/null ; 
res_err=$? ;
if [ ${res_err:=0} -eq 1 ] ; then 
 MDDevOut=${HOME}/md_cd.out ;
else
 MDDevOut=/dev/stderr ; 
fi 

### MdCd Chunk Development .  
#unset MdCd ; 
#unset GetDateReportCreation ;
#unset GetterByLineData ;

### Integrated inside fnct_debian_lib 
### . ${FNCTDLIBPATH}/0f86b448-72f4-11e6-8b1d-001e4c8856d6

declare -a UUID=( $( GetUIDRegister=True GetUAppsRegisterName=MdCd GetUTimeBased=True GetUUID | sed 's/-/ /g' ) )

evalName="IsLockArrayMdCd${UUID[0]}" ;
eval "declare -i ${evalName}=0" ; 
echo -ne "\n" > /dev/stderr ; 
while [ $( eval "echo \${${evalName}:=0}" ) -ne 1  ] ; do 
	value=$( cat ${StrFileStoreLock} ) ; 
	if [ ${value:=0} -eq 1 ] ; then 
		echo -ne "." > /dev/stderr ; 
		sleep 1 ; 
	else 
			echo -ne "\n" > /dev/stderr ; 
			eval "${evalName}=1"
			echo -ne "Adding lock.\n" > /dev/stderr  ; 
			eval "echo \${${evalName}} > ${StrFileStoreLock} 2> /dev/null ";
			test $? != 0 && sudo eval "echo \${${evalName}} > ${StrFileStoreLock} 2> /dev/null ";
			echo -ne "loading $0\n" > /dev/stderr ;
   declare -a ArrayInPath=( $* ) ;
			eval $( MCDevOut=${MDDevOut} MCListFile=${ArrayInPath[@]// /,} MdCd --startservices ) ; 
			echo -ne "Removing lock.\n" > /dev/stderr  ; 
			echo 0 > ${StrFileStoreLock} 2> /dev/null ; 
			valueRet=$? ; 
			test $? != 0 && sudo echo 0 > ${StrFileStoreLock}
	fi 
done 
eval "unset StrFileStoreInfo StrFileStoreLock UUID ${evalName} value " ; 

if [ "${LoadedFnctLib:=False}" != "True" ] ; then 
  ArrayLib=( ${OldArrayLib[@]} ) ; LLDisplayProg=False . /etc/init.d/Fnct.D/fnct_lib 
  unset OldArrayLib ;
fi
